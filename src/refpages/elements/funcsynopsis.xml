<?xml version="1.0" encoding="utf-8"?><refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
<info>
  <pubdate>$Date$</pubdate>
  <releaseinfo>$Revision$</releaseinfo>
</info>

<refmeta>
  <refentrytitle><?tdg-refentrytitle?></refentrytitle>
  <refmiscinfo role="element">funcsynopsis</refmiscinfo>
  <refmiscinfo role="pattern">db.funcsynopsis</refmiscinfo>
</refmeta>

<refnamediv>
  <refname><?tdg-refname?></refname>
  <refpurpose><?tdg-refpurpose?></refpurpose>
</refnamediv>

<?tdg-refsynopsisdiv?>

<refsection condition="ref.description">
<title>Description</title><para>A <tag>funcsynopsis</tag> contains the syntax summary of a
      function prototype or a set of function prototypes. The content model of
      this element was designed specifically to capture the semantics of most
      C-language function prototypes (for use in <acronym>UNIX</acronym>
      reference pages).</para>

      <para>This is one of the few places where DocBook attempts to model as
      well as describe. Using <tag>funcsynopsis</tag> for languages
      that are unrelated to C may prove difficult.</para>

      <refsection><info><title>Processing expectations</title></info>
        

        <para>For the most part, the processing application is expected to
        generate all of the parentheses, semicolons, commas, and so on
        required in the rendered synopsis. The exception to this rule is that
        the spacing and other punctuation inside a parameter that is a pointer
        to a function must be provided in the source markup.</para>

        <para>With sufficient author cooperation, it should be possible to
        mark up a function synopsis with enough clarity so that a processing
        system can generate either <acronym>K&amp;R</acronym>-style or
        <acronym>ANSI</acronym>-style renderings.</para>
</refsection>

<?tdg-attributes?>
<?tdg-parents?>
<?tdg-children?>

</refsection>

<?tdg-seealso?>

<refsection condition="ref.examples">
<title>Examples</title>

<para>There are two common presentation styles for function synopses,
“K&amp;R” style and “ANSI” style.</para>

<refsection xml:id="funcsynopsis.kr">
<title>K&amp;R Examples</title>

<programlisting><xi:include href="../examples/funcsynopsis.kr.1.xml" parse="text"/></programlisting>

<anchor xml:id="ex.os.funcsynopsis.kr.1" role="HACK-ex.out.start"/>
<xi:include href="../examples/funcsynopsis.kr.1.xml" xpointer="/1/2"/>
<anchor xml:id="ex.oe.funcsynopsis.kr.1" role="HACK-ex.out.end"/>

<programlisting><xi:include href="../examples/funcsynopsis.kr.2.xml" parse="text"/></programlisting>

<anchor xml:id="ex.os.funcsynopsis.kr.2" role="HACK-ex.out.start"/>
<xi:include href="../examples/funcsynopsis.kr.2.xml" xpointer="/1/2"/>
<anchor xml:id="ex.oe.funcsynopsis.kr.2" role="HACK-ex.out.end"/>

<programlisting><xi:include href="../examples/funcsynopsis.kr.3.xml" parse="text"/></programlisting>

<anchor xml:id="ex.os.funcsynopsis.kr.3" role="HACK-ex.out.start"/>
<xi:include href="../examples/funcsynopsis.kr.3.xml" xpointer="/1/2"/>
<anchor xml:id="ex.oe.funcsynopsis.kr.3" role="HACK-ex.out.end"/>

<programlisting><xi:include href="../examples/funcsynopsis.kr.4.xml" parse="text"/></programlisting>

<anchor xml:id="ex.os.funcsynopsis.kr.4" role="HACK-ex.out.start"/>
<xi:include href="../examples/funcsynopsis.kr.4.xml" xpointer="/1/2"/>
<anchor xml:id="ex.oe.funcsynopsis.kr.4" role="HACK-ex.out.end"/>

</refsection>

<refsection xml:id="funcsynopsis.ansi">
<title>ANSI Examples</title>

<programlisting><xi:include href="../examples/funcsynopsis.ansi.1.xml" parse="text"/></programlisting>

<anchor xml:id="ex.os.funcsynopsis.ansi.1" role="HACK-ex.out.start"/>
<xi:include href="../examples/funcsynopsis.ansi.1.xml" xpointer="/1/2"/>
<anchor xml:id="ex.oe.funcsynopsis.ansi.1" role="HACK-ex.out.end"/>

<programlisting><xi:include href="../examples/funcsynopsis.ansi.2.xml" parse="text"/></programlisting>

<anchor xml:id="ex.os.funcsynopsis.ansi.2" role="HACK-ex.out.start"/>
<xi:include href="../examples/funcsynopsis.ansi.2.xml" xpointer="/1/2"/>
<anchor xml:id="ex.oe.funcsynopsis.ansi.2" role="HACK-ex.out.end"/>

<programlisting><xi:include href="../examples/funcsynopsis.ansi.3.xml" parse="text"/></programlisting>

<anchor xml:id="ex.os.funcsynopsis.ansi.3" role="HACK-ex.out.start"/>
<xi:include href="../examples/funcsynopsis.ansi.3.xml" xpointer="/1/2"/>
<anchor xml:id="ex.oe.funcsynopsis.ansi.3" role="HACK-ex.out.end"/>

<programlisting><xi:include href="../examples/funcsynopsis.ansi.4.xml" parse="text"/></programlisting>

<anchor xml:id="ex.os.funcsynopsis.ansi.4" role="HACK-ex.out.start"/>
<xi:include href="../examples/funcsynopsis.ansi.4.xml" xpointer="/1/2"/>
<anchor xml:id="ex.oe.funcsynopsis.ansi.4" role="HACK-ex.out.end"/>

</refsection>
</refsection>

</refentry>
