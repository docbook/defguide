<?xml version="1.0" encoding="utf-8"?><refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
<info>
  <pubdate>$Date$</pubdate>
  <releaseinfo>$Revision$</releaseinfo>
</info>

<refmeta>
  <refentrytitle><?tdg-refentrytitle?></refentrytitle>
  <refmiscinfo role="element">symbol</refmiscinfo>
  <refmiscinfo role="pattern">db.symbol</refmiscinfo>
</refmeta>

<refnamediv>
  <refname><?tdg-refname?></refname>
  <refpurpose><?tdg-refpurpose?></refpurpose>
</refnamediv>

<?tdg-refsynopsisdiv?>

<refsection condition="ref.description">
<title>Description</title><para>A <tag>symbol</tag> is a name that represents a value. It
      should be used in contexts in which the name will actually be replaced
      by a value before processing. The canonical example is a
      <literal>#define</literal>d symbol in a C program where the C
      preprocessor replaces every occurrence of the symbol with its value
      before compilation begins.</para>

      <para>The <literal>Limit</literal> value of the <tag class="attribute">class</tag> attribute identifies those symbols
      that represent system limitations (e.g., the number of characters
      allowed in a pathname or the largest possible positive integer). DocBook
      <acronym>V3.1</acronym> introduced the <tag>constant</tag>
      element, which may be more suitable for some of these symbols.</para>

      <refsection><info><title>Processing expectations</title></info>
        

        <para>Formatted inline.</para>
</refsection>

<?tdg-attributes?>
<?tdg-parents?>
<?tdg-children?>

</refsection>

<?tdg-seealso?>

<refsection condition="ref.examples">
<title>Examples</title>

<programlisting><xi:include href="../examples/symbol.1.xml" parse="text"/></programlisting>

<anchor xml:id="ex.os.symbol.1" role="HACK-ex.out.start"/>
<xi:include href="../examples/symbol.1.xml" xpointer="/1/2"/>
<anchor xml:id="ex.oe.symbol.1" role="HACK-ex.out.end"/>

</refsection>

</refentry>
