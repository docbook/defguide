<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 version="5.0" xml:id="ch-create">
<?db filename="ch02.html"?>
<info>
  <title>Creating DocBook Documents</title>
</info>

<para><indexterm class="startofrange" xml:id="documentsDocBookch02">
      <primary>documents</primary>

      <secondary>creating</secondary>

    </indexterm>This chapter explains in concrete, practical terms how to make
  DocBook documents. It’s an overview of all the kinds of markup that are
  possible in DocBook documents. It explains how to create several kinds of
  DocBook documents: books, sets of books, chapters, articles, and reference
  manual entries. The idea is to give you enough basic information to actually
  start writing. The information here is intentionally skeletal; you can find
  the details in the reference section of this book.</para>

  <section xml:id="ch02-makexml">
    <info>
      <title>Making an <acronym>XML</acronym> Document</title>
    </info>
    <para><indexterm>
        <primary>XML</primary>
        <secondary>DocBook documents, creating</secondary>
      </indexterm><indexterm>
        <primary>DocBook</primary>
        <secondary>documents</secondary>
        <tertiary>creating</tertiary>
      </indexterm><indexterm>
        <primary>prolog</primary>
        <secondary>XML documents</secondary>
      </indexterm>An <acronym>XML</acronym> document consists of an optional
    <acronym>XML</acronym> declaration, an optional Document Type Declaration,
    which includes an optional internal subset, and a document (or root)
    element. We’ll discuss each of these in turn.</para>

    <para>In <acronym>XML</acronym> vocabularies like DocBook, which are
    defined with RELAX NG (and also in the case of vocabularies defined with
    W3C’s <acronym>XML</acronym> Schema), it is common to omit the Document
    Type Declaration entirely. The Document Type Declaration associates a
    document with a particular Document Type Definition
    (<acronym>DTD</acronym>).</para>

    <section xml:id="s.xmldecl"><info><title>An <acronym>XML</acronym> Declaration</title></info>


      <para><indexterm>
          <primary>declarations</primary>

          <secondary>XML</secondary>
        </indexterm><indexterm>
          <primary>XML</primary>

          <secondary>declarations</secondary>
        </indexterm><indexterm>
          <primary>versions</primary>

          <secondary>XML, identifying</secondary>
        </indexterm><acronym>XML</acronym> documents often begin with an
      <acronym>XML</acronym> declaration that identifies a few simple aspects
      of the document, for example:</para>

      <screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;</screen>

      <para>Identifying the version of <acronym>XML</acronym> ensures that
      future changes to the <acronym>XML</acronym> specification will not
      alter the semantics of this document. The encoding declaration tells the
      processor what character encoding this document uses. It must match the
      actual encoding that you use. The complete details of the
      <acronym>XML</acronym> declaration are described in the W3C standard,
      <citetitle>Extensible Markup Language (<acronym>XML</acronym>)
      1.0</citetitle> <biblioref linkend="XML"/>.</para>

      <para>If your document uses <acronym>XML</acronym> 1.0 and an encoding
      of either <literal role="encoding">utf-8</literal> or <literal role="encoding">utf-16</literal>, the <acronym>XML</acronym> declaration
      is not required. But it is never wrong to include it. If you do not
      include an <acronym>XML</acronym> declaration, your document must
      conform to <acronym>XML</acronym> 1.0. If you want to use
      <acronym>XML</acronym> 1.1, you must include an <acronym>XML</acronym>
      declaration and specify <code>version="1.1"</code> in it.</para>

      <para>The <acronym>XML</acronym> declaration is syntactically similar to
      a processing instruction, but it is not one. The <acronym>XML</acronym>
      declaration, if it is present, must be absolutely the first thing in
      your document and it may not appear anywhere else.</para>
    </section>

    <section xml:id="s.doctypedecl"><info><title>A Document Type Declaration</title></info>


      <para><indexterm>
          <primary>declarations</primary>

          <see>Document Type Declaration</see>
        </indexterm><indexterm>
          <primary>XML</primary>

          <secondary>Document Type Declaration</secondary>
        </indexterm><indexterm>
          <primary>Document Type Declaration</primary>

          <secondary>XML documents</secondary>
        </indexterm><indexterm>
          <primary>DocBook</primary>

          <secondary>Document Type Declaration</secondary>

          <see>Document Type Declaration</see>
        </indexterm><acronym>XML</acronym> documents don’t require a
      <acronym>DTD</acronym>, and if you are using RELAX NG, often they will
      not include one. Historically, DocBook <acronym>XML</acronym> documents
      have almost always had one.</para>

      <para><indexterm>
          <primary>elements</primary>

          <secondary>root element</secondary>
        </indexterm><indexterm>
          <primary>root element</primary>

          <secondary>Document Type Declaration</secondary>
        </indexterm>The Document Type Declaration identifies what the root
      element of the document will be and may specify the
      <acronym>DTD</acronym> that should be used when parsing the document. A
      typical Document Type Declaration for a DocBook <acronym>V4.5</acronym>
      document looks like this:</para>

      <screen>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"&gt;</screen>

      <para><indexterm>
          <primary>external declarations (XML)</primary>
        </indexterm><indexterm>
          <primary>public identifiers</primary>

          <secondary>XML documents</secondary>
        </indexterm><indexterm>
          <primary>system identifiers</primary>

          <secondary>XML</secondary>
        </indexterm>This declaration indicates that the root element will be
      <tag>book</tag> and that the <acronym>DTD</acronym> used will be
      DocBook <acronym>V4.5</acronym>, identified with both its public and
      system identifiers. In this example, the <acronym>DTD</acronym> is
      identified with an <acronym>HTTP</acronym> <acronym>URI</acronym>.
      <indexterm>
          <primary>URI</primary>

          <secondary>XML system identifiers</secondary>
        </indexterm>System identifiers in <acronym>XML</acronym> must be
      <acronym>URI</acronym>s. Almost all systems accept filenames and
      interpret them locally as <literal>file:</literal>
      <acronym>URL</acronym>s, but it’s always correct to fully qualify
      them.</para>

      <para>You can specify a <acronym>DTD</acronym> for DocBook
      <acronym>V5.0</acronym> documents:</para>

      <screen>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V5.0//EN"
               "http://www.oasis-open.org/docbook/xml/5.0/docbook.dtd"&gt;</screen>

      <para>But the limited constraints that can be expressed in
      <acronym>DTD</acronym>s mean that the resultant document may or may not
      <emphasis>really</emphasis> be valid DocBook <acronym>V5.0</acronym>.
      The normative schema for DocBook <acronym>V5.0</acronym> is the RELAX NG
      grammar with its Schematron annotations.</para>

      <para>The only reason to use a <acronym>DTD</acronym> with DocBook
      <acronym>V5.0</acronym> is if your editing environment (or other tool)
      requires one, for example, for syntax-directed editing. If you’re using
      a tool that requires <acronym>DTD</acronym>s, check with the vendor, as
      maybe a more recent version is available that supports RELAX NG.</para>
    </section>

    <section xml:id="s.internalsubset"><info><title>An Internal Subset</title></info>


      <para><indexterm>
          <primary>Document Type Declaration</primary>

          <secondary>XML</secondary>
        </indexterm><indexterm>
          <primary>Document Type Declaration</primary>

          <secondary>internal subset</secondary>
        </indexterm><indexterm>
          <primary>internal subset</primary>

          <secondary>Document Type Declarations</secondary>
        </indexterm><indexterm class="startofrange" xml:id="idx.entities-1">
          <primary>entities</primary>
        </indexterm><indexterm class="startofrange" xml:id="idx.entities-2">
          <primary>general entities</primary>
        </indexterm><indexterm>
          <primary>XML</primary>

          <secondary>Document Type Declaration</secondary>

          <tertiary>internal subset</tertiary>
        </indexterm>Even if you aren’t using the DTD version of DocBook
      <acronym>V5.0</acronym>, you may still want to use a Document Type
      Declaration to provide local declarations such as entities:<indexterm>
          <primary>examples</primary>

          <secondary>Document Type Declaration</secondary>
        </indexterm><indexterm>
          <primary>Document Type Declaration</primary>

          <secondary>example</secondary>
        </indexterm></para>

      <programlisting>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book [
&lt;!ENTITY nwalsh "Norman Walsh"&gt;
&lt;!ENTITY chap1 SYSTEM "chap1.xml"&gt;
&lt;!ENTITY chap2 SYSTEM "chap2.xml"&gt;
]&gt;</programlisting>

      <para>These declarations form what is known as the internal subset. In
      this example, the <acronym>DTD</acronym> has been omitted, but the two
      are not mutually exclusive. If you are using a <acronym>DTD</acronym>
      (which is technically known as the <firstterm>external
      subset</firstterm>), you can include the internal subset immediately
      after the <acronym>DTD</acronym>:</para>

      <programlisting>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V5.0/EN"
               "http://www.oasis-open.org/docbook/xml/5.0/docbook.dtd" [
&lt;!ENTITY nwalsh "Norman Walsh"&gt;
&lt;!ENTITY chap1 SYSTEM "chap1.xml"&gt;
&lt;!ENTITY chap2 SYSTEM "chap2.xml"&gt;
]&gt;</programlisting>

      <para><indexterm>
          <primary>Document Type Declaration</primary>

          <secondary>parsing order</secondary>
        </indexterm><indexterm>
          <primary>parsing order</primary>

          <secondary>Document Type Declaration</secondary>
        </indexterm>When both are specified, the internal subset is parsed
      <emphasis>first</emphasis>. If multiple declarations for an entity
      occur, the first declaration is used. This means that declarations in
      the internal subset override declarations in the external subset.</para>
    </section>

    <section xml:id="s.rootelem"><info><title>The Document (or Root) Element</title></info>


      <para><indexterm>
          <primary>root element</primary>
        </indexterm><indexterm>
          <primary>elements</primary>

          <secondary>root element</secondary>
        </indexterm>All <acronym>XML</acronym> documents must have exactly one
      root element, although it may have sibling comments and processing
      instructions. If the document has a Document Type Declaration, the root
      element usually immediately follows it:</para>

      <screen>&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE book [
&lt;!ENTITY nwalsh "Norman Walsh"&gt;
&lt;!ENTITY chap1 SYSTEM "chap1.xml"&gt;
&lt;!ENTITY chap2 SYSTEM "chap2.xml"&gt;
]&gt;
&lt;book xmlns="http://docbook.org/ns/docbook" version="5.0"&gt;…&lt;/book&gt;</screen>

      <para>The important point is that the root element must be physically
      present immediately after the Document Type Declaration. You cannot
      place the root element of the document in an external entity.</para>
    </section>
  </section>

  <section xml:id="ch02-physdiv"><info><title>Physical Divisions: Breaking a Document into Separate Files</title></info>


    <para><indexterm>
        <primary>divisions</primary>

        <secondary>logical</secondary>
      </indexterm><indexterm>
        <primary>documents</primary>

        <secondary>dividing</secondary>
      </indexterm>The rest of this chapter describes how you can break
    documents into logical chunks, such as books, chapters, sections, and so
    on. Before we begin, and while the subject of the internal subset is fresh
    in your mind, let’s take a quick look at how to break documents into
    separate files.</para>

    <para>Actually, we’ve already told you how to do it. If you recall, in the
    preceding sections we had declarations of the form:</para>

    <screen>&lt;!ENTITY <replaceable>name</replaceable> SYSTEM "<replaceable>filename</replaceable>"&gt;</screen>

    <para><indexterm>
        <primary>entities</primary>

        <secondary>inserting files</secondary>
      </indexterm>If you refer to the entity <replaceable>name</replaceable>
    in your document after this declaration, the system will insert the
    contents of the file <replaceable>filename</replaceable> into your
    document at that point. So, if you’ve got a book that consists of three
    chapters and two appendixes, you might create a file called
    <filename>book.xml</filename>, which looks like this:<indexterm>
        <primary>examples</primary>

        <secondary>book</secondary>
      </indexterm><indexterm>
        <primary>books</primary>

        <secondary>example</secondary>
      </indexterm></para>

    <screen>&lt;!DOCTYPE book [
&lt;!ENTITY chap1 SYSTEM "chap1.xml"&gt;
&lt;!ENTITY chap2 SYSTEM "chap2.xml"&gt;
&lt;!ENTITY chap3 SYSTEM "chap3.xml"&gt;
&lt;!ENTITY appa SYSTEM "appa.xml"&gt;
&lt;!ENTITY appb SYSTEM "appb.xml"&gt;
]&gt;
&lt;book xmlns="http://docbook.org/ns/docbook" version="5.0"&gt;
&lt;title&gt;My First Book&lt;/title&gt;
&amp;chap1;
&amp;chap2;
&amp;chap3;
&amp;appa;
&amp;appb;
&lt;/book&gt;</screen>

    <para><indexterm>
        <primary>Document Type Declaration</primary>

        <secondary>divisions of documents</secondary>
      </indexterm>You can then write the chapters and appendixes conveniently
    in separate files.</para>

    <para>Documents that you reference with external parsed entities cannot
    have a Document Type Declaration. For example, Chapter 1 might begin like
    this:</para>

    <screen>&lt;chapter xml:id="ch1"&gt;&lt;title&gt;My First Chapter&lt;/title&gt;
&lt;para&gt;My first paragraph.&lt;/para&gt;
…</screen>

    <para>But it must not begin with its own Document Type Declaration:</para>

    <screen>&lt;!DOCTYPE chapter&gt;
&lt;chapter xmlns="http://docbook.org/ns/docbook"
         xml:id="ch1"&gt;
&lt;title&gt;My First Chapter&lt;/title&gt;
&lt;para&gt;My first paragraph.&lt;/para&gt;
…</screen>

    <para>It is also possible to construct documents from different files
    using XInclude. Recasting the previous example using XInclude
    yields:<indexterm>
        <primary>XInclude</primary>
      </indexterm><indexterm>
        <primary>examples</primary>

        <secondary>XInclude</secondary>
      </indexterm></para>

    <screen>&lt;book xmlns="http://docbook.org/ns/docbook"
      xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0"&gt;
&lt;title&gt;My First Book&lt;/title&gt;
&lt;xi:include href="chap1.xml"/&gt;
&lt;xi:include href="chap2.xml"/&gt;
&lt;xi:include href="chap3.xml"/&gt;
&lt;xi:include href="appa.xml"/&gt;
&lt;xi:include href="appb.xml"/&gt;
&lt;/book&gt;</screen>

    <para>Notice that we can completely omit the Document Type Declaration in
    this case, but we must declare the XInclude namespace.<indexterm>
        <primary>namespaces</primary>

        <secondary>XInclude</secondary>
      </indexterm></para>

    <para>The essential trade-offs between external parsed entities and
    XInclude are:</para>

    <itemizedlist>
      <listitem>
        <para>XInclude can be used in a document that does not have a Document
        Type Declaration. Many web services applications (ones that rely on
        SOAP, anyway) forbid a Document Type Declaration and therefore cannot
        use entities of any sort.</para>
      </listitem>

      <listitem>
        <para>The documents <emphasis>referenced by</emphasis> XInclude are
        complete, free-standing <acronym>XML</acronym> documents. They can
        declare their own local entities using a Document Type Declaration.
        Documents referenced by external parsed entities cannot have a
        Document Type Declaration. If they use entities, those entities must
        be declared in the document that does the including.</para>
      </listitem>

      <listitem>
        <para>External parsed entities can have multiple top-level elements.
        They are not required to be <quote>single rooted.</quote> XIncluded
        documents must be wholly well-formed <acronym>XML</acronym>.</para>
      </listitem>

      <listitem>
        <para>All <acronym>XML</acronym> validators support external parsed
        entities. (Validators that do not <emphasis>are not</emphasis>
        conformant <acronym>XML</acronym> processors.) XInclude is a separate
        specification and may or may not be supported by tools.</para>
      </listitem>

      <listitem>
        <para>The <acronym>XML</acronym> validator expands entities and
        therefore <quote>sees</quote> the entire document. This means that
        ID/IDREF links can freely cross entity boundaries. Because XIncluded
        documents are free-standing, a document containing an IDREF that
        crosses a document boundary cannot be valid. It can be well-formed,
        and processors can do the right thing, but the validator cannot
        determine that the document is valid. What’s more, the same ID value
        can occur in several XIncluded documents without causing a validity
        error. This may cause subsequent processing to fail.</para>
      </listitem>

      <listitem>
        <para>As time passes, the use of <acronym>DTD</acronym>-based
        mechanisms like entities is diminishing. If you have an eye on the
        future, to the extent that it is practical, it is probably better to
        use XInclude than entities.<indexterm class="endofrange" startref="idx.entities-2"/><indexterm class="endofrange" startref="idx.entities-1"/></para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="ch02-logdiv"><info><title>Logical Divisions: The Categories of Elements in DocBook</title></info>


    <para><indexterm>
        <primary>divisions</primary>

        <secondary>logical</secondary>
      </indexterm><indexterm>
        <primary>DocBook</primary>

        <secondary>elements</secondary>

        <tertiary>categories of</tertiary>
      </indexterm><indexterm>
        <primary>elements</primary>

        <secondary>categories, DocBook divisions</secondary>
      </indexterm>DocBook elements can be divided broadly into these
    categories:</para>

    <simplelist type="vert">
      <member>Sets</member>

      <member>Books</member>

      <member>Divisions, which divide books</member>

      <member>Components, which divide books or divisions</member>

      <member>Sections, which subdivide components</member>

      <member>Meta-information elements</member>

      <member>Block elements</member>

      <member>Inline elements</member>
    </simplelist>

    <para>In the rest of this section, we’ll describe briefly the elements
    that make up these categories. This section is designed to give you an
    overview. It is not an exhaustive list of every element in DocBook.</para>

    <para>For more information about any specific element and the elements
    that it may contain, consult the reference page for the element in
    question.</para>

    <section xml:id="s.sets"><info><title>Sets</title></info>


      <para><indexterm>
          <primary>sets</primary>
        </indexterm>A <tag>set</tag> contains two or more
      <tag>book</tag>s. It’s the hierarchical top of DocBook. You use
      the <tag>set</tag> tag, for example, for a series of books on a
      single subject that you want to access and maintain as a single unit,
      such as the manuals for series of computer systems or the documentation
      (tutorial, reference, etc.) for a programming language. Sets are allowed
      to contain other sets, though this is not common.</para>
    </section>

    <section xml:id="s.books"><info><title>Books</title></info>


      <para><indexterm>
          <primary>customizing DocBook</primary>

          <secondary>book organization</secondary>
        </indexterm><indexterm>
          <primary>books</primary>

          <secondary>typical structure</secondary>
        </indexterm><indexterm>
          <primary>book element</primary>
        </indexterm>A <tag>book</tag> is probably the most common
      top-level element in a document. The DocBook definition of a book is
      very loose and general. Given the variety of books authored with DocBook
      and the number of different conventions for book organization used
      around the world, any attempt to impose a strict ordering of elements
      would make the content model extremely complex. Therefore, DocBook gives
      you free rein. You can use a local customization (see <xref linkend="app-customizing"/>) if you want to impose a more strict
      ordering for your applications.</para>

      <para>A <tag>book</tag> consists of a mixture of the following
      elements:</para>

      <variablelist>
        <varlistentry>
          <term>Dedication</term>

          <listitem>
            <para>The <tag>dedication</tag> pages almost always occur
            at the front of a book.<indexterm>
                <primary>dedication element</primary>
              </indexterm></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Navigational components</term>

          <listitem>
            <para><indexterm>
                <primary>navigation, component-level elements</primary>
              </indexterm><indexterm>
                <primary>elements</primary>

                <secondary>components, navigation</secondary>
              </indexterm><indexterm>
                <primary>toc</primary>

                <see>tables of contents</see>
              </indexterm><indexterm>
                <primary>index element</primary>
              </indexterm><indexterm>
                <primary>tables of contents</primary>
              </indexterm>There are a couple of component-level elements
            designed for navigation: <tag>toc</tag>, for Tables of
            Contents and Lists of Titles (for lists of figures, tables,
            examples, etc.); and <tag>index</tag>, for indexes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Divisions</term>

          <listitem>
            <para><indexterm>
                <primary>divisions</primary>

                <secondary>book</secondary>
              </indexterm><indexterm>
                <primary>part element</primary>
              </indexterm><indexterm>
                <primary>reference element</primary>
              </indexterm><indexterm>
                <primary>refentry element</primary>
              </indexterm><indexterm>
                <primary>components</primary>
              </indexterm>Divisions are the first hierarchical level below
            <tag>book</tag>. Divisions contain
            <tag>part</tag>s and <tag>reference</tag>s. A
            <tag>part</tag> contains components. A
            <tag>reference</tag> contains
            <tag>refentry</tag>s. These are discussed more thoroughly
            in <xref linkend="making-refentry"/>.</para>

            <para>Books can contain components directly and are not required
            to contain divisions.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Components</term>

          <listitem>
            <para><indexterm>
                <primary>chapter element</primary>

                <secondary>components, similarity to</secondary>
              </indexterm>These are the chapter-like elements of a
            <tag>book</tag>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section xml:id="s.components"><info><title>Components</title></info>


      <para><indexterm>
          <primary>books</primary>

          <secondary>components</secondary>
        </indexterm><indexterm>
          <primary>part element</primary>
        </indexterm><indexterm>
          <primary>preface element</primary>
        </indexterm><indexterm>
          <primary>chapter element</primary>
        </indexterm><indexterm>
          <primary>appendix element</primary>
        </indexterm><indexterm>
          <primary>glossary element</primary>
        </indexterm><indexterm>
          <primary>bibliography element</primary>
        </indexterm><indexterm>
          <primary>article element</primary>
        </indexterm><indexterm>
          <primary>block elements</primary>
        </indexterm><indexterm>
          <primary>sections</primary>

          <secondary>elements</secondary>
        </indexterm>Components are the chapter-like elements of a
      <tag>book</tag> or <tag>part</tag>:
      <tag>preface</tag>, <tag>chapter</tag>, <tag role="keep-together">appendix</tag>, <tag>glossary</tag>,
      and <tag>bibliography</tag>. An <tag>article</tag> can
      also occur at the component level. We describe
      <tag>article</tag>s in more detail in <xref linkend="making-article"/>. Components generally contain block elements
      and/or sections, and some can contain navigational components and
      <tag>refentry</tag>s.</para>
    </section>

    <section xml:id="s.sections"><info><title>Sections</title></info>


      <para><indexterm>
          <primary>nesting</primary>

          <secondary>section elements</secondary>
        </indexterm><indexterm>
          <primary>numbered sections, levels</primary>
        </indexterm><indexterm>
          <primary>elements</primary>

          <secondary>sections</secondary>
        </indexterm>There are several flavors of sectioning elements in
      DocBook:</para>

      <variablelist>
        <varlistentry>
          <term><tag>sect1</tag></term>

          <term><tag>sect2</tag></term>

          <term><tag>sect3</tag></term>

          <term><tag>sect4</tag></term>

          <term><tag>sect5</tag></term>

          <listitem>
            <para>The <tag>sect1</tag>…<tag>sect5</tag>
            elements are sectioning elements. They can occur in most <phrase role="keep-together">component-level</phrase> elements. These
            numbered section elements must be properly nested
            (<tag>sect2</tag>s can only occur inside
            <tag>sect1</tag>s, <tag>sect3</tag>s can only
            occur inside <tag>sect2</tag>s, and so on). There are five
            levels of numbered sections.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>section</tag></term>

          <listitem>
            <para><indexterm>
                <primary>section element</primary>
              </indexterm>The <tag>section</tag> element is an
            alternative to numbered sections. The <tag>section</tag>
            element is recursive, meaning that you can nest it to any depth
            desired.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>simplesect</tag></term>

          <listitem>
            <para><indexterm>
                <primary>simplesect element</primary>
              </indexterm>In addition to numbered sections, there is the
            <tag>simplesect</tag> element. It is a terminal section
            that can occur at any level, but it cannot have any other
            sectioning element nested within it.</para>

            <para>A distinguishing feature of <tag>simplesect</tag> is
            that it does not occur in the Table of Contents.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>bridgehead</tag></term>

          <listitem>
            <para><indexterm>
                <primary>bridgehead element</primary>
              </indexterm>A <tag>bridgehead</tag> provides a section
            title without any containing section.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>refsect1</tag>…<tag>refsect3</tag></term>

          <listitem>
            <para><indexterm>
                <primary>refentry element</primary>
              </indexterm>These elements, which occur only in
            <tag>refentry</tag>s, are analogous to the numbered
            section elements in components. There are only three levels of
            numbered section elements in a <tag>refentry</tag>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>refsection</tag></term>

          <listitem>
            <para><indexterm>
                <primary>refsection element</primary>
              </indexterm>The <tag>refsection</tag> element is a
            recursive division in a <tag>refentry</tag>. It is an
            alternative to the numbered reference section tags
            (<tag>refsect1</tag>…<tag>refsect3</tag>). Like
            the <tag>section</tag> element, the
            <tag>refsection</tag> element is recursive.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>glossdiv</tag>, <tag>bibliodiv</tag>, and
          <tag>indexdiv</tag></term>

          <listitem>
            <para><indexterm>
                <primary>glossdiv element</primary>
              </indexterm><indexterm>
                <primary>bibliodiv element</primary>
              </indexterm><indexterm>
                <primary>glossary element</primary>
              </indexterm><indexterm>
                <primary>bibliography element</primary>
              </indexterm><indexterm>
                <primary>index element</primary>
              </indexterm>The <tag>glossary</tag>,
            <tag>bibliography</tag>, and <tag>index</tag>
            elements can be broken into top-level <phrase role="keep-together">divisions</phrase>, but not sections. Unlike
            sections, these elements do not nest.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section xml:id="s.meta"><info><title>Meta-Information</title></info>


      <para><indexterm>
          <primary>meta-information</primary>

          <secondary>elements</secondary>
        </indexterm><indexterm>
          <primary>wrappers</primary>

          <secondary>meta-information</secondary>
        </indexterm>All of the elements at the section level and above, and
      many other elements, include a wrapper for meta-information about the
      content. That element is named <tag>info</tag>. In earlier
      versions of DocBook, there were many similarly named elements for this
      purpose: <literal>bookinfo</literal>, <literal>chapterinfo</literal>,
      etc. In DocBook <acronym>V5.0</acronym>, there is only one.</para>

      <para><indexterm>
          <primary>author element</primary>
        </indexterm><indexterm>
          <primary>title element</primary>
        </indexterm><indexterm>
          <primary>publisher element</primary>
        </indexterm><indexterm>
          <primary>revision histories</primary>
        </indexterm><indexterm>
          <primary>keyword sets (meta-information)</primary>
        </indexterm><indexterm>
          <primary>indexes</primary>

          <secondary>meta-information</secondary>
        </indexterm>The meta-information wrapper is designed to contain
      bibliographic information about the content (<tag>author</tag>,
      <tag>title</tag>, <tag>publisher</tag>, and so on) as
      well as other meta-information such as revision histories, keyword sets,
      and index terms.</para>

      <para>An <tag>info</tag> can contain:</para>

      <variablelist>
        <varlistentry>
          <term><tag>title</tag></term>

          <listitem>
            <para>The text of the title of a section of a document or of a
            formal block-level element</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>titleabbrev</tag></term>

          <listitem>
            <para>The abbreviation of a title</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>subtitle</tag></term>

          <listitem>
            <para>The subtitle of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>abstract</tag></term>

          <listitem>
            <para>A summary</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>address</tag></term>

          <listitem>
            <para>A real-world address, generally a postal address</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>annotation</tag></term>

          <listitem>
            <para>An annotation</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>artpagenums</tag></term>

          <listitem>
            <para>The page numbers of an article as published</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>author</tag></term>

          <listitem>
            <para>The name of an individual author</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>authorgroup</tag></term>

          <listitem>
            <para>A wrapper for author information when a document has
            multiple authors or <phrase role="keep-together">collaborators</phrase></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>authorinitials</tag></term>

          <listitem>
            <para>The initials or other short identifier for an author</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>bibliocoverage</tag></term>

          <listitem>
            <para>The spatial or temporal coverage of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>biblioid</tag></term>

          <listitem>
            <para>An identifier for a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>bibliomisc</tag></term>

          <listitem>
            <para>Untyped bibliographic information</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>bibliomset</tag></term>

          <listitem>
            <para>A cooked container for related bibliographic
            information</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>bibliorelation</tag></term>

          <listitem>
            <para>The relationship of a document to another</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>biblioset</tag></term>

          <listitem>
            <para>A raw container for related bibliographic information</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>bibliosource</tag></term>

          <listitem>
            <para>The source of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>collab</tag></term>

          <listitem>
            <para>Identifies a collaborator</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>confgroup</tag></term>

          <listitem>
            <para>A wrapper for document meta-information about a
            conference</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>contractnum</tag></term>

          <listitem>
            <para>The contract number of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>contractsponsor</tag></term>

          <listitem>
            <para>The sponsor of a contract</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>copyright</tag></term>

          <listitem>
            <para>Copyright information about a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>date</tag></term>

          <listitem>
            <para>The date of publication or revision of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>edition</tag></term>

          <listitem>
            <para>The name or number of an edition of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>editor</tag></term>

          <listitem>
            <para>The name of the editor of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>extendedlink</tag></term>

          <listitem>
            <para>An XLink extended link</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>issuenum</tag></term>

          <listitem>
            <para>The number of an issue of a journal</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>itermset</tag></term>

          <listitem>
            <para>A set of index terms in the meta-information of a
            document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>keywordset</tag></term>

          <listitem>
            <para>A set of keywords describing the content of a
            document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>legalnotice</tag></term>

          <listitem>
            <para>A statement of legal obligations or requirements</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>mediaobject</tag></term>

          <listitem>
            <para>A displayed media object (video, audio, image, etc.)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>orgname</tag></term>

          <listitem>
            <para>The name of an organization</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>othercredit</tag></term>

          <listitem>
            <para>A person or entity, other than an author or editor, credited
            in a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>pagenums</tag></term>

          <listitem>
            <para>The numbers of the pages in a book, for use in a
            bibliographic entry</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>printhistory</tag></term>

          <listitem>
            <para>The printing history of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>productname</tag></term>

          <listitem>
            <para>The formal name of a product</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>productnumber</tag></term>

          <listitem>
            <para>A number assigned to a product</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>pubdate</tag></term>

          <listitem>
            <para>The date of publication of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>publisher</tag></term>

          <listitem>
            <para>The publisher of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>publishername</tag></term>

          <listitem>
            <para>The name of the publisher of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>releaseinfo</tag></term>

          <listitem>
            <para>Information about a particular release of a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>revhistory</tag></term>

          <listitem>
            <para>A history of the revisions to a document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>seriesvolnums</tag></term>

          <listitem>
            <para>Numbers of the volumes in a series of books</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>subjectset</tag></term>

          <listitem>
            <para>A set of terms describing the subject matter of a
            document</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><tag>volumenum</tag></term>

          <listitem>
            <para>The volume number of a document in a set (as of books in a
            set or articles in a journal)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <tag>title</tag>, <tag>titleabbrev</tag>, and
      <tag>subtitle</tag> elements can usually appear either
      immediately before or inside the <tag>info</tag> wrapper (but
      not both). This means you don’t need the extra wrapper in the common
      case where all you want to specify is a title.</para>
    </section>

    <section xml:id="s.block"><info><title>Block Elements</title></info>


      <para><indexterm>
          <primary>block elements</primary>
        </indexterm><indexterm>
          <primary>paragraphs</primary>

          <secondary>paragraph-level elements</secondary>
        </indexterm><indexterm>
          <primary>lists</primary>
        </indexterm><indexterm>
          <primary>examples</primary>

          <secondary>block elements</secondary>
        </indexterm><indexterm>
          <primary>figures</primary>
        </indexterm><indexterm>
          <primary>tables</primary>
        </indexterm><indexterm>
          <primary>synopses</primary>
        </indexterm><indexterm>
          <primary>admonitions</primary>
        </indexterm><indexterm>
          <primary>line-specific environments</primary>
        </indexterm>The block elements occur immediately below the component
      and sectioning elements. These are the (roughly) paragraph-level
      elements in DocBook. They can be divided into a number of categories:
      lists, admonitions, line-specific environments, synopses of several
      sorts, tables, figures, examples, and a dozen or more miscellaneous
      elements.</para>

      <section><info><title>Block versus inline elements</title></info>


        <para><indexterm>
            <primary>block elements</primary>

            <secondary>inline elements vs.</secondary>
          </indexterm><indexterm>
            <primary>inline elements</primary>

            <secondary>block elements vs.</secondary>
          </indexterm>At the paragraph level, it’s convenient to divide
        elements into two classes, <firstterm>block</firstterm> and
        <firstterm>inline</firstterm>. From a structural point of view, this
        distinction is based loosely on their relative size, but it’s easiest
        to describe the difference in terms of their presentation.</para>

        <para><indexterm>
            <primary>sidebars</primary>
          </indexterm><indexterm>
            <primary>block quotations</primary>
          </indexterm><indexterm>
            <primary>quotations (block)</primary>
          </indexterm>Block elements are usually presented with a paragraph
        (or larger) break before and after them. Most can contain other block
        elements, and many can contain character data and inline elements.
        Paragraphs, lists, sidebars, tables, and block quotations are all
        common examples of block elements.</para>

        <para><indexterm>
            <primary>fonts</primary>

            <secondary>changes (inline elements)</secondary>
          </indexterm><indexterm>
            <primary>characters</primary>

            <secondary>inline elements</secondary>
          </indexterm><indexterm>
            <primary>cross-references</primary>
          </indexterm><indexterm>
            <primary>filenames</primary>
          </indexterm><indexterm>
            <primary>commands</primary>
          </indexterm><indexterm>
            <primary>options</primary>
          </indexterm><indexterm>
            <primary>subscripts and superscripts</primary>
          </indexterm><indexterm>
            <primary>glossaries</primary>

            <secondary>glossary terms</secondary>
          </indexterm>Inline elements are generally represented without any
        obvious breaks. The most common distinguishing mark of inline elements
        is a font change, but inline elements may present no visual
        distinction at all. Inline elements contain character data and
        possibly other inline elements, but they never contain block elements.
        Inline elements are used to mark up data such as cross-references,
        filenames, commands, options, subscripts and superscripts, and
        glossary terms.</para>
      </section>

      <section xml:id="s.lists"><info><title>Lists</title></info>


        <para><indexterm>
            <primary>lists</primary>

            <secondary>elements</secondary>
          </indexterm><indexterm>
            <primary>elements</primary>

            <secondary>lists</secondary>
          </indexterm>There are eight list elements in DocBook:</para>

        <variablelist>
          <varlistentry>
            <term><tag>calloutlist</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>callout element</primary>
                </indexterm><indexterm>
                  <primary>calloutlist element</primary>
                </indexterm>A list of <tag>callout</tag>s and their
              descriptions. The <tag>callout</tag>s are marks,
              frequently <phrase role="keep-together">numbered</phrase> and
              typically on a graphic (<tag>imageobjectco</tag>) or
              verbatim environment (<tag role="keep-together">programlistingco</tag> or
              <tag>screenco</tag>), that are described in a
              <tag>calloutlist</tag>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>bibliolist</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>bibliolist element</primary>
                </indexterm>A list of bibliography entries
              (<tag>biblioentry</tag> or
              <tag>bibliomixed</tag> elements).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>glosslist</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>glosslist element</primary>
                </indexterm>A list of glossary terms and their
              definitions.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>itemizedlist</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>itemizedlist element</primary>
                </indexterm>An unordered (bulleted) list. There are attributes
              to control the marks used.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>orderedlist</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>orderedlist element</primary>
                </indexterm>A numbered list. There are attributes to control
              the type of enumeration.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>segmentedlist</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>segmentedlist element</primary>
                </indexterm>A repeating set of named items. For example, a
              list of states and their capitals might be represented as a
              <tag>segmentedlist</tag>. Segmented lists consist of
              <tag>segtitle</tag>s, <tag role="keep-together">seglistitem</tag>s, and
              <tag>seg</tag>s.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>simplelist</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>simplelist element</primary>
                </indexterm>An unadorned list of items.
              <tag>simplelist</tag>s can be inline or arranged in
              columns.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>variablelist</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>variablelist element</primary>
                </indexterm>A list of terms and definitions or descriptions.
              (This list of list types is a <tag role="keep-together">variablelist</tag>.)</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="s.admonitions"><info><title>Admonitions</title></info>


        <para><indexterm>
            <primary>admonitions</primary>

            <secondary>DocBook types</secondary>
          </indexterm><indexterm>
            <primary>caution element</primary>
          </indexterm><indexterm>
            <primary>important element</primary>
          </indexterm><indexterm>
            <primary>note element</primary>
          </indexterm><indexterm>
            <primary>tip element</primary>
          </indexterm><indexterm>
            <primary>warning element</primary>
          </indexterm>There are five types of admonitions in DocBook:
        <tag>caution</tag>, <tag>important</tag>,
        <tag>note</tag>, <tag>tip</tag>, and
        <tag>warning</tag>.</para>

        <para>All of the admonitions have the same structure: an optional
        <tag>title</tag> followed by paragraph-level elements. DocBook
        does not impose any specific semantics on the individual admonitions.
        For example, DocBook does not mandate that <tag>warning</tag>s
        be reserved for cases where bodily harm can result.</para>
      </section>

      <section xml:id="s.line-specific"><info><title>Line-specific environments</title></info>


        <para><indexterm>
            <primary>line-specific environments</primary>
          </indexterm><indexterm>
            <primary>whitespace</primary>

            <secondary>preserving in source text</secondary>
          </indexterm><indexterm>
            <primary>line breaks, preserving</primary>
          </indexterm>These environments preserve whitespace and line breaks
        in the source text. DocBook does not provide the equivalent of
        <acronym>HTML</acronym>’s <tag namespace="http://www.w3.org/1999/xhtml">br</tag> tag, so there’s
        no way to interject a line break into normal running text.</para>

        <variablelist>
          <varlistentry>
            <term><tag>address</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>address element</primary>
                </indexterm>The <tag>address</tag> element is intended
              for postal addresses. In addition to being line-specific,
              <tag>address</tag> contains additional elements suitable
              for marking up names and addresses: <tag>city</tag>,
              <tag>country</tag>, <tag>fax</tag>,
              <tag>otheraddr</tag>, <tag>personname</tag>,
              <tag>phone</tag>, <tag>pob</tag>,
              <tag>postcode</tag>, <tag>state</tag>, and
              <tag>street</tag>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>literallayout</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>literallayout element</primary>
                </indexterm>A <tag>literallayout</tag> does not have
              any semantic association beyond the preservation of whitespace
              and line breaks. In particular, while
              <tag>programlisting</tag> and <tag>screen</tag>
              are frequently presented in a fixed-width font, a change of
              fonts is not ordinarily <phrase role="keep-together">implied</phrase> by
              <tag>literallayout</tag>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>programlisting</tag> and
            <tag>programlistingco</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>programlisting element</primary>
                </indexterm><indexterm>
                  <primary>programlistingco element</primary>
                </indexterm><indexterm>
                  <primary>fonts</primary>

                  <secondary>fixed-width, programs and code</secondary>
                </indexterm>The <tag>programlisting</tag> and
              <tag>programlistingco</tag> elements are verbatim
              environments, usually presented in Courier or some other
              fixed-width font, for program sources, code fragments, and
              similar listings. The two elements are the same, except that
              <tag>programlistingco</tag> supports markup for
              callouts.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>screen</tag> and
            <tag>screenco</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>screen element</primary>
                </indexterm><indexterm>
                  <primary>screenco element</primary>
                </indexterm><indexterm>
                  <primary>text screen captures</primary>
                </indexterm>The <tag>screen</tag> and
              <tag>screenco</tag> elements are verbatim or literal
              environments for text screen captures, other fragments of an
              <acronym>ASCII</acronym> display, and similar things.
              <tag>screen</tag> is also a frequent catchall for any
              verbatim text. The two elements are the same, except that
              <tag>screenco</tag> supports markup for callouts.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>screenshot</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>screenshot element</primary>
                </indexterm><tag>screenshot</tag> is actually a
              wrapper for a <tag>mediaobject</tag> intended for
              screenshots of a <acronym>GUI</acronym>, for example.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>synopsis</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>synopsis element</primary>
                </indexterm>A <tag>synopsis</tag> is a verbatim
              environment for command and function synopses.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="s.formal"><info><title>Examples, figures, and tables</title></info>


        <para><indexterm>
            <primary>block elements</primary>

            <secondary>formal and informal elements</secondary>
          </indexterm><indexterm>
            <primary>formal elements</primary>
          </indexterm><indexterm>
            <primary>informal elements</primary>
          </indexterm><indexterm>
            <primary>example element</primary>
          </indexterm><indexterm>
            <primary>figure element</primary>
          </indexterm><indexterm>
            <primary>table element</primary>
          </indexterm><indexterm>
            <primary>informalexample element</primary>
          </indexterm><indexterm>
            <primary>informaltable element</primary>
          </indexterm>Examples, figures, and tables are supported with the
        block-level elements: <tag>example</tag>,
        <tag>informalexample</tag>, <tag>figure</tag>,
        <tag>informalfigure</tag>, <tag>table</tag>, and
        <tag>informaltable</tag>.</para>

        <para><indexterm>
            <primary>titles</primary>

            <secondary>formal elements</secondary>
          </indexterm>The distinction between formal and informal elements is
        that formal elements have titles while informal ones do not.</para>

        <para><indexterm>
            <primary>CALS tables</primary>
          </indexterm>DocBook supports CALS tables (defined with
        <tag>tgroup</tag>, <tag>colspec</tag>,
        <tag>spanspec</tag>, <tag>thead</tag>,
        <tag>tfoot</tag>, <tag>tbody</tag>,
        <tag>row</tag>, <tag>entry</tag>,
        <tag>entrytbl</tag>, and <tag>caption</tag>) and HTML
        tables<indexterm>
            <primary>HTML</primary>

            <secondary>tables</secondary>
          </indexterm> (defined with <tag>col</tag>,
        <tag>colgroup</tag>, <tag>thead</tag>,
        <tag>tfoot</tag>, <tag>tbody</tag>,
        <tag>tr</tag>, <tag>td</tag>, and
        <tag>caption</tag>).</para>
      </section>

      <section xml:id="s.paras"><info><title>Paragraphs</title></info>


        <para><indexterm>
            <primary>para element</primary>
          </indexterm>There are three paragraph elements:
        <tag>para</tag>, <tag>simpara</tag> (simple paragraphs
        may not contain other block-level elements), and
        <tag>formalpara</tag> (formal paragraphs have titles).</para>
      </section>

      <section xml:id="s.equations"><info><title>Equations</title></info>


        <para><indexterm>
            <primary>equation element</primary>
          </indexterm><indexterm>
            <primary>titles</primary>

            <secondary>equation elements</secondary>
          </indexterm><indexterm>
            <primary>inlineequation element</primary>
          </indexterm>There are two block-equation elements,
        <tag>equation</tag> and <tag>informalequation</tag>
        (for inline equations, use <tag>inlineequation</tag>).</para>

        <para>Informal equations don’t have titles. For reasons of backward
        compatibility, <tag>equation</tag>s are not required to have
        titles. However, it may be more difficult for some stylesheet
        languages to properly enumerate <tag>equation</tag>s if they
        lack titles.</para>
      </section>

      <section xml:id="s.graphics"><info><title>Graphics and media</title></info>


        <para><indexterm>
            <primary>graphics</primary>
          </indexterm><indexterm>
            <primary>figure element</primary>
          </indexterm><indexterm>
            <primary>screenshot element</primary>
          </indexterm><indexterm>
            <primary>block elements</primary>

            <secondary>graphic</secondary>
          </indexterm><indexterm>
            <primary>inlinegraphic element</primary>
          </indexterm>Graphics occur most frequently in
        <tag>figure</tag>s and <tag>screenshot</tag>s, but
        they can also occur outside those wrappers. DocBook considers a
        <tag>mediaobject</tag> a block element, even if it occurs in
        an inline context. For graphics that you want to be represented
        inline, use <tag>inlinemediaobject</tag>.</para>

        <para><indexterm>
            <primary>mediaobject element</primary>
          </indexterm><indexterm>
            <primary>inlinemediaobject element</primary>
          </indexterm>Media objects (and inline media objects) can contain
        five kinds of content:</para>

        <variablelist>
          <varlistentry>
            <term><tag>audioobject</tag></term>

            <listitem>
              <para>A wrapper for audio data and its associated
              meta-information. (Which contains
              <tag>audiodata</tag>.)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>imageobject</tag></term>

            <listitem>
              <para>A wrapper for image data and its associated
              meta-information. (Which contains
              <tag>imagedata</tag>.)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>imageobjectco</tag></term>

            <listitem>
              <para>A wrapper for an image object with callouts. (Which
              contains <tag>imagedata</tag> and <phrase role="keep-together">callout-related</phrase>
              information).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>videoobject</tag></term>

            <listitem>
              <para>A wrapper for video data and its associated
              meta-information. (Which contains
              <tag>videodata</tag>.)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>textobject</tag></term>

            <listitem>
              <para>A wrapper for a text description of an object and its
              associated meta-information. (Which contains
              <tag>textdata</tag>.)</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>The audio, image, video, and text data in a media object are, by
        definition, alternatives.</para>
      </section>

      <section xml:id="s.qanda"><info><title>Questions and answers</title></info>


        <para><indexterm>
            <primary>qandaset element</primary>
          </indexterm><indexterm>
            <primary>faq element</primary>
          </indexterm><indexterm>
            <primary>frequently asked questions (FAQ)</primary>

            <secondary>markup for</secondary>
          </indexterm><indexterm>
            <primary>question element</primary>
          </indexterm><indexterm>
            <primary>answer element</primary>
          </indexterm>The <tag>qandaset</tag> element is suitable for
        <acronym>FAQ</acronym>s (Frequently Asked Questions) and other similar
        collections of questions and answers. Each
        <tag>qandaentry</tag> contains a <tag>question</tag>
        and its <tag>answer</tag>(s). The set of questions and answers
        can be divided into sections with <tag role="keep-together">qandadiv</tag>.</para>
      </section>

      <section xml:id="s.tasks"><info><title>Procedures and tasks</title></info>


        <para><indexterm>
            <primary>procedure element</primary>
          </indexterm>A <tag>procedure</tag> contains
        <tag>step</tag>s, which may contain
        <tag>substeps</tag> or
        <tag>stepalternatives</tag>.</para>

        <para><indexterm>
            <primary>task element</primary>
          </indexterm>The <tag>task</tag> element is a wrapper around
        the <tag>procedure</tag> element that provides additional,
        optional elements, including <tag>tasksummary</tag>,
        <tag>taskprerequisites</tag>, <tag>example</tag>, and
        <tag role="keep-together">taskrelated</tag>.</para>
      </section>

      <section xml:id="s.synopses"><info><title>Synopses</title></info>


        <para>DocBook provides a number of elements for describing command,
        function, and class synopses:</para>

        <variablelist>
          <varlistentry>
            <term><tag>cmdsynopsis</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>cmdsynopsis element</primary>
                </indexterm><indexterm>
                  <primary>parameters (commands), markup</primary>
                </indexterm><indexterm>
                  <primary>options</primary>

                  <secondary>marking up</secondary>
                </indexterm><indexterm>
                  <primary>commands</primary>
                </indexterm>A syntax summary for a software command. A
              <tag>cmdsynopsis</tag> contains <tag>arg</tag>,
              <tag>command</tag>, and <tag>group</tag>
              elements. For long synopses, the <tag>sbr</tag> tag can
              be used to indicate where a break should occur. Complex synopses
              can be composed from <tag>synopfragment</tag>s.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>funcsynopsis</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>funcsynopsis element</primary>
                </indexterm>The syntax summary for a function definition. A
              function synopsis consists of one or more
              <tag>funcprototype</tag>s and may include additional,
              literal information in a <tag>funcsynopsisinfo</tag>.
              Each prototype consists of <tag>modifier</tag>s, a
              <tag>funcdef</tag>, and a collection of
              <tag>paramdef</tag>, <tag>varargs</tag>, and/or
              <tag>void</tag> elements.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>classsynopsis</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>classsynopsis element</primary>
                </indexterm>The syntax summary for a class definition. A class
              synopsis consists of one or more <tag>ooclass</tag>,
              <tag>ooexception</tag>, or
              <tag>oointerface</tag> elements followed by zero or more
              <tag>constructorsynopsis</tag>,
              <tag>destructorsynopsis</tag>,
              <tag>fieldsynopsis</tag>, and
              <tag>methodsynopsis</tag> elements Like
              <tag>funcsynopsis</tag>, it may include additional,
              literal information, in this case, in a
              <tag>classsynopsisinfo</tag>.</para>
            </listitem>
          </varlistentry>

          <!-- xxx; classsynopsis etc. -->
        </variablelist>
      </section>

      <!--
<section xml:id="s.htmlforms">
<title>HTML Forms</title>

<para>If the HTML Forms module is included, the following HTML 4.01 forms
elements are available:</para>

<variablelist>
<varlistentry>
<term><tag>html:button</tag></term>
<listitem><para><?tdg-purp html:button?>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>html:fieldset</tag></term>
<listitem><para><?tdg-purp html:fieldset?>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>html:form</tag></term>
<listitem><para><?tdg-purp html:form?>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>html:input</tag></term>
<listitem><para><?tdg-purp html:input?>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>html:label</tag></term>
<listitem><para><?tdg-purp html:label?>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>html:legend</tag></term>
<listitem><para><?tdg-purp html:legend?>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>html:option</tag></term>
<listitem><para><?tdg-purp html:option?>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>html:select</tag></term>
<listitem><para><?tdg-purp html:select?>.</para></listitem>
</varlistentry>
<varlistentry>
<term><tag>html:textarea</tag></term>
<listitem><para><?tdg-purp html:textarea?>.</para></listitem>
</varlistentry>
</variablelist>
</section>
-->

      <section xml:id="s.misc"><info><title>Miscellaneous block elements</title></info>


        <para>The following block elements are also available:</para>

        <variablelist>
          <varlistentry>
            <term><tag>blockquote</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>blockquote element</primary>
                </indexterm><indexterm>
                  <primary>attribution element</primary>
                </indexterm>A block quotation. Block quotations may have
              <tag>attribution</tag>s.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>epigraph</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>epigraph element</primary>
                </indexterm>A short introduction, typically a quotation, at
              the beginning of a document or component. The
              <tag>epigraph</tag> element may include an
              <tag>attribution</tag> element.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>msgset</tag></term>

            <listitem>
              <para><indexterm>
                  <primary>error messages</primary>

                  <secondary>sets of related</secondary>
                </indexterm>A set of related error messages.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>sidebar</tag></term>

            <listitem>
              <para>A sidebar.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section xml:id="s.inline"><info><title>Inline Elements</title></info>


      <para><indexterm>
          <primary>inline elements</primary>
        </indexterm><indexterm>
          <primary>text</primary>

          <secondary>inline elements</secondary>
        </indexterm>Users of DocBook are provided with a surfeit of inline
      elements. Inline elements are used to mark up running text. In published
      documents, inline elements often cause a font change or other small
      change, but they do not cause line or paragraph breaks.</para>

      <para>In practice, writers generally settle on the tagging of inline
      elements that suits their time and subject matter. This may be a large
      number of elements or only a handful. What is important is that you
      choose to mark up not every possible item, but only those for which
      distinctive tagging will be useful in the production of the finished
      document for the readers who will search through it.</para>

      <para>The following comprehensive list may be a useful tool for the
      process of narrowing down the elements that you will choose to mark up;
      it is not intended to overwhelm you by its sheer length. For
      convenience, we’ve divided the inlines into several <phrase role="keep-together">subcategories</phrase>.</para>

      <para>The classification used here is not meant to be authoritative,
      only helpful in providing a feel for the nature of the inlines. Several
      elements appear in more than one category, and arguments could be made
      to support the placement of additional elements in other categories or
      entirely new categories.</para>

      <section xml:id="s.inline.tradpub"><info><title>Traditional publishing inlines</title></info>


        <para><indexterm>
            <primary>inline elements</primary>

            <secondary>traditional publishing</secondary>
          </indexterm><indexterm>
            <primary>traditional publishing inline elements</primary>
          </indexterm>These inlines identify things that commonly occur in
        general writing:</para>

        <variablelist>
          <varlistentry>
            <term><tag>abbrev</tag></term>

            <listitem>
              <para>An abbreviation, especially one followed by a
              period.<indexterm>
                  <primary>abbrev element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>acronym</tag></term>

            <listitem>
              <para>An often pronounceable word made from the initial (or
              selected) letters of a name or phrase.<indexterm>
                  <primary>acronym element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>emphasis</tag></term>

            <listitem>
              <para>Emphasized text.<indexterm>
                  <primary>emphasis element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>footnote</tag></term>

            <listitem>
              <para>A footnote. The location of the
              <tag>footnote</tag> element identifies the location of
              the first reference to the footnote. Additional references to
              the same footnote can be inserted with
              <tag>footnoteref</tag>.<indexterm>
                  <primary>footnoteref element</primary>
                </indexterm><indexterm>
                  <primary>footnote element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>phrase</tag></term>

            <listitem>
              <para>A span of text.<indexterm>
                  <primary>phrase element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>quote</tag></term>

            <listitem>
              <para>An inline quotation.<indexterm>
                  <primary>quote element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>trademark</tag></term>

            <listitem>
              <para>A trademark.<indexterm>
                  <primary>trademark element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

<section xml:id="s.inline.xref">
<title>Cross-references and linking</title>

<para><indexterm>
  <primary>cross-references</primary>
  </indexterm><indexterm>
  <primary>link element</primary>
  </indexterm><indexterm>
  <primary>glossterm element</primary>
  </indexterm><indexterm>
  <primary>linkend attribute</primary>
</indexterm>The cross-reference inlines identify both explicit
cross-references and links (e.g., <tag>link</tag> and <tag>xref</tag>)
and implicit cross-references (e.g., <tag>citation</tag> and <tag>glossterm</tag>).
</para>

<variablelist>
<varlistentry>
<term><tag>anchor</tag></term>
<listitem>
  <para>A spot in the document.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>biblioref</tag></term>
<listitem>
  <para>A cross-reference to a bibliographic entry.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>citation</tag></term>
<listitem>
  <para>An inline bibliographic reference to another published work.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>citerefentry</tag></term>
<listitem>
  <para>A citation to a reference page.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>citetitle</tag></term>
<listitem>
  <para>The title of a cited work.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>firstterm</tag></term>
<listitem>
  <para>The first occurrence of a term.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>glossterm</tag></term>
<listitem>
  <para>A glossary term.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>link</tag></term>
<listitem>
  <para>A hypertext link.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>olink</tag></term>
<listitem>
  <para>A link that addresses its target indirectly.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><tag>xref</tag></term>
<listitem>
  <para>A cross reference to another part of the document.</para>
</listitem>
</varlistentry>
</variablelist>

<para>DocBook provides a number of common attributes to facilitate
cross-references and hypertext linking. Broadly speaking, these facilities
break down into three categories: standard XML ID/IDREF linking,
<biblioref linkend="XLink"/>, and DocBook-specific markup. These different
and sometimes overlapping approaches exist because DocBook's long history
predates many modern hypertext standards.</para>

<para>The easiest and most interoperable way to identify the target of
a link (the thing being linked <emphasis>to</emphasis>) is with an
<tag class="attribute">xml:id</tag> attribute. Use the
<tag>anchor</tag> element if you need to place a link target at a
specific point in text where there isn't a convenient wrapper element
on which to hang the ID.</para>

<para>XML ID/IDREF linking is accomplished with the <tag class="attribute">linkend</tag> attribute,
most frequently on the <tag>link</tag> or <tag>xref</tag> elements. On a
<tag>link</tag>, the <tag class="attribute">linkend</tag> attribute establishes a hypertext
link from the text of the <tag>link</tag> to the element with the <tag class="attribute">xml:id</tag>
attribute specified in the <tag class="attribute">linkend</tag> attribute. The semantics of
<tag>xref</tag> are analogous, but the link text is generated automatically.
For example, an <tag>xref</tag> to an <tag class="attribute">xml:id</tag> on a <tag>figure</tag>
element might generate link text like “Figure 3.1, Title of Figure”.
The exact nature of the generated text is controlled by the tool processing
DocBook.</para>

<para>The <tag class="attribute">xml:id</tag> for this section is “<literal>s.inline.xref</literal>”.
The following table demonstrates how <tag>link</tag> and <tag>xref</tag>
work:</para>

<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>Markup</entry>
<entry>Generated result</entry>
</row>
</thead>
<tbody>
<row>
<entry><code><![CDATA[Link to <link linkend="s.inline.xref">the current</link> section.]]></code>
</entry>
<entry>Link to <link linkend="s.inline.xref">the current</link> section.</entry>
</row>
<row>
<entry><code><![CDATA[Link to <xref linkend="s.inline.xref"/>.]]></code></entry>
<entry>Link to <xref linkend="s.inline.xref"/>.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>The <tag class="attribute">linkend</tag> attribute can be used on most inline
elements, not just on <tag class="attribute">link</tag> and <tag class="attribute">xref</tag>. Used in
this way, the element on which the <tag class="attribute">linkend</tag> attribute
appears behaves like a <tag>link</tag>. (This is a convenient alternative
that avoids having to place the other inline element inside a <tag>link</tag>
or place a <tag>link</tag> inside it.)</para>

<note>
<para>DocBook allows links to occur more-or-less ubiquitously. As a
consequence, it is possible to nest one link inside another. This is
not forbidden, but the semantics of such nested links are
undefined.</para>
</note>

<para>For cross-references to a bibliography entry, the <tag>citation</tag>
and <tag>biblioref</tag> elements work analogously to the <tag>link</tag>
and <tag>xref</tag> elements. Bibliographic references often require very
specific formatting; having specific elements for this purpose simplifies
some processing.</para>

<para>For cross-references to a glossary entry, <tag>firstterm</tag>
or <tag>glossterm</tag> are used. You can use <tag class="attribute">linkend</tag> on
those elements, but sometimes the links can be constructed implicitly
by the processor.</para>

<para>Titles are often highlighted (in printed books they are usually
italicized, for example). The <tag>citetitle</tag> element is used to
identify titles. It may be used with or without linking attributes.</para>

<para>That leaves <tag>olink</tag> and <biblioref linkend="XLink"/>.
The <tag>olink</tag> element predates, and is largely superseded by, XLink.
The semantics of <tag>olink</tag> are described in detail on
<link linkend="element.db.olink">its reference page</link>.</para>

<para>XLink is a separate, general purpose XML linking standard. It
provides a rich and powerful vocabulary for describing a wide variety
of linking scenarios. DocBook V5.1 has complete support for XLink and
allows the XLink attributes on most elements.</para>

<para>The simplest and most common use of XLink in DocBook is simply
to place the <tag class="attribute">xlink:href</tag> attribute on an inline element. The value
of the <tag class="attribute">xlink:href</tag> attribute is technically an
XPointer (see
<biblioref linkend="XPointer"/>), though this is often simply a URI.
DocBook places no constraints on the kinds of XPointers that can be used,
though not all processors will be able to address all XPointers, so make
sure you are satisfied that you can process the ones you use.
</para>

<para>Where
<tag class="attribute">linkend</tag> on an element forms an <emphasis>intra</emphasis>-document
link (exclusively), <tag class="attribute">xlink:href</tag> usually forms an
<emphasis>inter</emphasis>-document link.</para>

<para>There's nothing that prevents an XLink from being an intra-document
link, using the bare fragment identifier form. The salient difference between
using an ID/IDREF link (<tag class="attribute">linkend</tag>) and a bare fragment identifier
(<tag class="attribute">xlink:href</tag>) is that the former is always checked by the validator
and the latter never is. This means that errors in the latter form are less
likely to be detected by the processor.</para>

<para>Two examples of simple XLinks:</para>

<informaltable>
<tgroup cols="2">
<thead>
<row>
<entry>Markup</entry>
<entry>Generated result</entry>
</row>
</thead>
<tbody>
<row>
<entry><code><![CDATA[Link to the <link xlink:href="http://docbook.org/">DocBook</link> website.]]></code>
</entry>
<entry>Link to the <link xlink:href="http://docbook.org/">DocBook</link> website.
</entry>
</row>
<row>
<entry><code><![CDATA[Link to <link xlink:href="#s.inline.xref">this section</link>.]]></code>
</entry>
<entry>Link to <link xlink:href="#s.inline.xref">this section</link>.
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>XLink allows authors to describe some very useful linking structures
that have long been ignored by web browsers. Consider, for example:</para>

<programlisting><![CDATA[<para>What about
<citetitle xlink:type="extended">
  <link xlink:type="locator" xlink:href="http://docbook.org/"
        xlink:label="target" xlink:title="DocBook.org"/>
  <link xlink:type="locator" xlink:href="http://en.wikipedia.org/wiki/DocBook"
        xlink:label="target" xlink:title="DocBook on Wikipedia"/>
  <phrase xlink:type="resource" xlink:label="source">DocBook</phrase>
  <link xlink:type="arc" xlink:from="source" xlink:to="target"/>
</citetitle>
and
<citetitle xml:id="xquery">XQuery</citetitle>.
</para>]]></programlisting>

<para>This defines a link with one source “DocBook” and <emphasis>two</emphasis>
targets, the DocBook website and the DocBook page on
<link xlink:href="http://en.wikipedia.org/"/>. It can get even more interesting.
With this <tag>extendedlink</tag> somewhere in the document, for example in the
<tag>info</tag> element:</para>

<programlisting><![CDATA[<extendedlink xlink:type="extended">
  <locator xlink:type="locator" xlink:href="http://www.w3.org/TR/XQuery"
           xlink:label="target" xlink:title="XQuery specification"/>
  <locator xlink:type="locator" xlink:href="http://www.w3.org/XML/Query/"
           xlink:label="target" xlink:title="XQuery WG"/>
  <locator xlink:type="locator" xlink:href="http://en.wikipedia.org/wiki/XQuery"
           xlink:label="target" xlink:title="XQuery on Wikipedia"/>
  <locator xlink:type="locator" xlink:href="#xquery" xlink:label="source"/>
  <arc xlink:type="arc" xlink:from="source" xlink:to="target"/>
</extendedlink>]]></programlisting>

<para>The word “XQuery” in the preceding example <emphasis>becomes a multi-ended
link too</emphasis>! XLink allows links to be defined from either end and with
either inline or standoff markup.</para>

<para>Support (or lack thereof!) for these more complex forms is alas, highly
variable. Check to make sure your processor can handle the forms you use.</para>

<para>One final note on XLink. The XLink specification uses an attribute,
<tag class="attribute">xlink:title</tag>, to contain the human-readable titles of locators,
arcs, etc. DocBook assiduously avoids placing human-readable content in
attribute values because they cannot contain inline graphics for non-Unicode
characters and they complicate translation efforts. Nevertheless, for
compatibility, the <tag class="attribute">xlink:title</tag> attribute is used in XLink support.
Consider the implications of placing human-readable titles in that attribute
carefully.</para>
</section>

<section xml:id="s.inline.markup"><info><title>Markup</title></info>


        <para><indexterm>
            <primary>markup</primary>

            <secondary>elements</secondary>
          </indexterm>These inlines are used to mark up text for special
        presentation:</para>

        <variablelist>
          <varlistentry>
            <term><tag>foreignphrase</tag></term>

            <listitem>
              <para>A word or phrase in a language other than the primary
              language of the document<indexterm>
                  <primary>foreignphrase element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>wordasword</tag></term>

            <listitem>
              <para>A word meant specifically as a word and not representing
              anything else<indexterm>
                  <primary>wordasword element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>computeroutput</tag></term>

            <listitem>
              <para>Data, generally text, displayed or presented by a
              computer<indexterm>
                  <primary>computeroutput element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>literal</tag></term>

            <listitem>
              <para>Inline text that is some literal value<indexterm>
                  <primary>literal element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>markup</tag></term>

            <listitem>
              <para>A string of formatting markup in text that is to be
              represented literally<indexterm>
                  <primary>markup element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>prompt</tag></term>

            <listitem>
              <para>A character or string indicating the start of an input
              field in a computer display<indexterm>
                  <primary>prompt element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>replaceable</tag></term>

            <listitem>
              <para>Content that may or must be replaced by the user<indexterm>
                  <primary>replaceable element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>tag</tag></term>

            <listitem>
              <para>A component of XML (or SGML) markup<indexterm>
                  <primary>tag element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>userinput</tag></term>

            <listitem>
              <para>Data entered by the user<indexterm>
                  <primary>userinput element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="s.inline.math"><info><title>Mathematics</title></info>


        <para><indexterm>
            <primary>elements</primary>

            <secondary>mathematics</secondary>
          </indexterm><indexterm>
            <primary>mathematics (DocBook)</primary>
          </indexterm><indexterm>
            <primary>equations (elements)</primary>
          </indexterm><indexterm>
            <primary>MathML</primary>

            <secondary>incorporating</secondary>
          </indexterm><indexterm>
            <primary>namespaces</primary>
          </indexterm>DocBook does not define a complete set of elements for
        representing equations. The <citetitle>Mathematical Markup Language
        (<acronym>MathML</acronym>)</citetitle> <biblioref linkend="MathML"/>
        is a standard that defines a comprehensive grammar for representing
        equations. <acronym>MathML</acronym> markup may be used in any of the
        equation elements
        (<tag>equation</tag>,<tag>informalequation</tag>, and
        <tag>inlineequation</tag>). For simple mathematics equations
        that do not require extensive markup, the
        <tag>mathphrase</tag> element is an alternative.</para>

        <variablelist>
          <varlistentry>
            <term><tag>inlineequation</tag></term>

            <listitem>
              <para>A mathematical equation or expression occurring
              inline<indexterm>
                  <primary>inlineequation element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>mathphrase</tag></term>

            <listitem>
              <para>A mathematical phrase that can be represented with
              ordinary text and a small amount of markup<indexterm>
                  <primary>mathphrase element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>subscript</tag></term>

            <listitem>
              <para>A subscript (as in H<subscript>2</subscript>O, the
              molecular formula for water)<indexterm>
                  <primary>subscript element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>superscript</tag></term>

            <listitem>
              <para>A superscript (as in x<superscript>2</superscript>, the
              mathematical notation for x multiplied by itself)<indexterm>
                  <primary>superscript element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="s.inline.ui"><info><title>User interfaces</title></info>


        <para>These elements describe aspects of a user interface:<indexterm>
            <primary>user interfaces, describing (elements)</primary>
          </indexterm><indexterm>
            <primary>elements</primary>

            <secondary>user interfaces, describing</secondary>
          </indexterm></para>

        <variablelist>
          <varlistentry>
            <term><tag>accel</tag></term>

            <listitem>
              <para>A graphical user interface (GUI) keyboard
              shortcut<indexterm>
                  <primary>accel element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>guibutton</tag></term>

            <listitem>
              <para>The text on a button in a GUI<indexterm>
                  <primary>guibutton element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>guiicon</tag></term>

            <listitem>
              <para>A graphic and/or text appearing as an icon in a
              GUI<indexterm>
                  <primary>guiicon element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>guilabel</tag></term>

            <listitem>
              <para>The text of a label in a GUI</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>guimenu</tag></term>

            <listitem>
              <para>The name of a menu in a GUI<indexterm>
                  <primary>guimenu element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>guimenuitem</tag></term>

            <listitem>
              <para>The name of a terminal menu item in a GUI<indexterm>
                  <primary>guimenuitem element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>guisubmenu</tag></term>

            <listitem>
              <para>The name of a submenu in a GUI<indexterm>
                  <primary>guisubmenu element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>keycap</tag></term>

            <listitem>
              <para>The text printed on a key on a keyboard<indexterm>
                  <primary>keycap element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>keycode</tag></term>

            <listitem>
              <para>The internal, frequently numeric, identifier for a key on
              a keyboard<indexterm>
                  <primary>keycode element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>keycombo</tag></term>

            <listitem>
              <para>A combination of input actions<indexterm>
                  <primary>keycombo element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>keysym</tag></term>

            <listitem>
              <para>The symbolic name of a key on a keyboard<indexterm>
                  <primary>keysym element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>menuchoice</tag></term>

            <listitem>
              <para>A selection or series of selections from a menu<indexterm>
                  <primary>menuchoice element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>mousebutton</tag></term>

            <listitem>
              <para>The conventional name of a mouse button<indexterm>
                  <primary>mousebutton element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>shortcut</tag></term>

            <listitem>
              <para>A key combination for an action that is also accessible
              through a menu<indexterm>
                  <primary>shortcut element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="s.inline.prog"><info><title>Programming languages and constructs</title></info>


        <para><indexterm>
            <primary>programming languages (elements)</primary>
          </indexterm><indexterm>
            <primary>constructs (programming), elements</primary>
          </indexterm><indexterm>
            <primary>inline elements</primary>

            <secondary>programming languages and constructs</secondary>
          </indexterm><indexterm>
            <primary>elements</primary>

            <secondary>programming languages and constructs</secondary>
          </indexterm><indexterm>
            <primary>inline elements</primary>

            <secondary>technical</secondary>
          </indexterm>Many of the technical inlines in DocBook are related to
        programming:</para>

        <variablelist>
          <varlistentry>
            <term><tag>classname</tag></term>

            <listitem>
              <para>The name of a class, in the object-oriented programming
              sense<indexterm>
                  <primary>classname element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>constant</tag></term>

            <listitem>
              <para>A programming or system constant<indexterm>
                  <primary>constant element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>errorcode</tag></term>

            <listitem>
              <para>An error code<indexterm>
                  <primary>errorcode element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>errorname</tag></term>

            <listitem>
              <para>An error name<indexterm>
                  <primary>errorname element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>errortype</tag></term>

            <listitem>
              <para>The classification of an error message<indexterm>
                  <primary>errortype element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>function</tag></term>

            <listitem>
              <para>The name of a function or subroutine, as in a programming
              language<indexterm>
                  <primary>function element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>literal</tag></term>

            <listitem>
              <para>Inline text that is some literal value<indexterm>
                  <primary>literal element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>msgtext</tag></term>

            <listitem>
              <para>The actual text of a message component in a message
              set<indexterm>
                  <primary>msgtext element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>parameter</tag></term>

            <listitem>
              <para>A value or a symbolic reference to a value<indexterm>
                  <primary>parameter element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>property</tag></term>

            <listitem>
              <para>A unit of data associated with some part of a computer
              system<indexterm>
                  <primary>property element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>replaceable</tag></term>

            <listitem>
              <para>Content that may or must be replaced by the user<indexterm>
                  <primary>replaceable element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>returnvalue</tag></term>

            <listitem>
              <para>The value returned by a function<indexterm>
                  <primary>returnvalue element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>symbol</tag></term>

            <listitem>
              <para>A name that is replaced by a value before
              processing<indexterm>
                  <primary>symbol element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>token</tag></term>

            <listitem>
              <para>A unit of information<indexterm>
                  <primary>token element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>type</tag></term>

            <listitem>
              <para>The classification of a value<indexterm>
                  <primary>type element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>varname</tag></term>

            <listitem>
              <para>The name of a variable<indexterm>
                  <primary>varname element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="s.inline.os"><info><title>Operating systems</title></info>


        <para><indexterm>
            <primary>operating systems</primary>

            <secondary>inline elements</secondary>
          </indexterm>These inlines identify parts of an operating system, or
        an operating environment:</para>

        <variablelist>
          <varlistentry>
            <term><tag>application</tag></term>

            <listitem>
              <para>The name of a software program<indexterm>
                  <primary>application element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>command</tag></term>

            <listitem>
              <para>The name of an executable program or other software
              command<indexterm>
                  <primary>command element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>envar</tag></term>

            <listitem>
              <para>A software environment variable<indexterm>
                  <primary>envar element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>filename</tag></term>

            <listitem>
              <para>The name of a file<indexterm>
                  <primary>filename element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>msgtext</tag></term>

            <listitem>
              <para>The actual text of a message component in a message
              set<indexterm>
                  <primary>msgtext element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>option</tag></term>

            <listitem>
              <para>An option for a software command<indexterm>
                  <primary>option element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>parameter</tag></term>

            <listitem>
              <para>A value or a symbolic reference to a value<indexterm>
                  <primary>parameter element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>prompt</tag></term>

            <listitem>
              <para>A character or string indicating the start of an input
              field in a computer display<indexterm>
                  <primary>prompt element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>systemitem</tag></term>

            <listitem>
              <para>A system-related item or term<indexterm>
                  <primary>systemitem element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="s.inline.general"><info><title>General purpose</title></info>


        <para><indexterm>
            <primary>general-purpose technical inline elements</primary>
          </indexterm><indexterm>
            <primary>inline elements</primary>

            <secondary>technical (general-purpose)</secondary>
          </indexterm>There are also a number of general-purpose technical
        inlines:</para>

        <variablelist>
          <varlistentry>
            <term><tag>application</tag></term>

            <listitem>
              <para>The name of a software program<indexterm>
                  <primary>application element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>database</tag></term>

            <listitem>
              <para>The name of a database, or part of a database<indexterm>
                  <primary>database element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>email</tag></term>

            <listitem>
              <para>An email address<indexterm>
                  <primary>email element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>filename</tag></term>

            <listitem>
              <para>The name of a file<indexterm>
                  <primary>filename element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>hardware</tag></term>

            <listitem>
              <para>A physical part of a computer system<indexterm>
                  <primary>hardware element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>literal</tag></term>

            <listitem>
              <para>Inline text that is some literal value<indexterm>
                  <primary>literal element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>option</tag></term>

            <listitem>
              <para>An option for a software command<indexterm>
                  <primary>option element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>optional</tag></term>

            <listitem>
              <para>Optional information<indexterm>
                  <primary>optional element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>replaceable</tag></term>

            <listitem>
              <para>Content that may or must be replaced by the user<indexterm>
                  <primary>replaceable element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>symbol</tag></term>

            <listitem>
              <para>A name that is replaced by a value before
              processing<indexterm>
                  <primary>symbol element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>token</tag></term>

            <listitem>
              <para>A unit of information<indexterm>
                  <primary>token element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><tag>type</tag></term>

            <listitem>
              <para>The classification of a value<indexterm>
                  <primary>type element</primary>
                </indexterm></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

<section xml:id="cm-patterns">
<title>Content model patterns</title>
<para>Throughout the element reference pages, you will see groups of
elements identified thematically: “admonition elements”, “bibliography
inlines”, etc. For reference, here is what those groups consist
of:</para>

<xi:include href="patterns.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"/>
</section>

  </section>

  <section xml:id="roots"><info><title>Roots: Starting Your DocBook Document</title></info>


    <para>There’s one final detail of the physical and logical structures of
    DocBook that we’ve left out: where can your document begin? In other
    words, what are the valid <quote>document elements</quote> of DocBook
    documents? Naturally, you can start at <tag>set</tag> and
    <tag>book</tag>, but can you also start at
    <tag>chapter</tag>? What about <tag>para</tag> or
    <tag>personname</tag>?</para>

    <para>If you come to DocBook from the <acronym>DTD</acronym> days, this
    question may seem odd. A <acronym>DTD</acronym> doesn’t provide any
    facility to impose constraints on where a document can begin. If the
    element occurs in the <acronym>DTD</acronym>, you can start with
    it.</para>

    <para>RELAX NG does give us the ability to impose such constraints. In
    fact, it <emphasis>requires</emphasis> that we do. Of course, we could
    make the constraint vacuous by listing every possible element as a
    potential document element.</para>

    <para>But, on reflection, that’s not necessarily the best choice. It’s
    valuable to have metadata associated with documents, so only elements with
    an <tag>info</tag> element can be root elements, but not every
    element with an <tag>info</tag> element is currently included. In
    DocBook <acronym>V5.0</acronym> the following elements are available:
    <tag>acknowledgements</tag>, <tag>appendix</tag>,
    <tag>article</tag>, <tag role="keep-together">bibliography</tag>, <tag>book</tag>,
    <tag>chapter</tag>, <tag>colophon</tag>,
    <tag>dedication</tag>, <tag>glossary</tag>,
    <tag>index</tag>, <tag>para</tag>,
    <tag>part</tag>, <tag role="keep-together">preface</tag>,
    <tag>refentry</tag>, <tag>reference</tag>,
    <tag>refsect1</tag>, <tag>refsect2</tag>,
    <tag>refsect3</tag>, <tag>refsection</tag>,
    <tag>sect1</tag>, <tag>sect2</tag>,
    <tag>sect3</tag>, <tag>sect4</tag>,
    <tag>sect5</tag>, <tag>section</tag>,
    <tag>set</tag>, <tag>setindex</tag>, and
    <tag>toc</tag>.</para>

    <para>With the next point release of DocBook, <acronym>V5.1</acronym>, the
    technical committee may take the position that any element that can
    contain an <tag>info</tag> wrapper can be a document <phrase role="keep-together">element</phrase>. This would dramatically expand the
    list of valid root elements.</para>
  </section>

  <section xml:id="ch02-makebook"><info><title>Making a DocBook Book</title></info>


    <para><indexterm>
        <primary>DocBook</primary>

        <secondary>book, making</secondary>
      </indexterm><indexterm>
        <primary>books</primary>

        <secondary>DocBook, making</secondary>
      </indexterm><indexterm>
        <primary>meta-information</primary>

        <secondary>DocBook book</secondary>
      </indexterm>A typical <tag>book</tag>, in English at least,
    consists of some meta-information in an <tag>info</tag>
    (<tag>title</tag>, <tag>author</tag>,
    <tag>copyright</tag>, etc.), one or more
    <tag>preface</tag>s, several <tag>chapter</tag>s, and
    perhaps a few <tag>appendix</tag>es. A <tag>book</tag> may
    also contain <tag>bibliography</tag>s,
    <tag>glossary</tag>s, <tag>index</tag>es, and a <tag role="keep-together">colophon</tag>.</para>

    <para><xref linkend="ex-typicalbook"/> shows the structure of a typical
    book. Additional content is required where the ellipses occur.<indexterm>
        <primary>books</primary>

        <secondary>typical structure</secondary>
      </indexterm><indexterm>
        <primary>examples</primary>

        <secondary>book</secondary>
      </indexterm><indexterm>
        <primary>books</primary>

        <secondary>example</secondary>
      </indexterm></para>

    <example xml:id="ex-typicalbook"><info><title>A typical book</title></info>

      <programlisting><![CDATA[<book>
<info>
  <title>My First Book</title>
  <author>
    <personname><firstname>Jane</firstname><surname>Doe</surname></personname>
  </author>
  <copyright><year>2010</year><holder>Jane Doe</holder></copyright>
</info>
<preface><title>Foreword</title> ... </preface>
<chapter> ... </chapter>
<chapter> ... </chapter>
<chapter> ... </chapter>
<appendix> ... </appendix>
<appendix> ... </appendix>
<index> ... </index>
</book>]]></programlisting>
    </example>
  </section>

  <section xml:id="ch02-makechap"><info><title>Making a Chapter</title></info>


    <para><indexterm>
        <primary>chapter element</primary>

        <secondary>typical chapter, structure</secondary>
      </indexterm><indexterm>
        <primary>preface element</primary>

        <secondary>typical structure</secondary>
      </indexterm><indexterm>
        <primary>appendix element</primary>

        <secondary>typical structure</secondary>
      </indexterm><tag>chapter</tag>s, <tag>preface</tag>s,
    and <tag>appendix</tag>es all have a similar structure. They
    consist of a <tag>title</tag>, possibly some additional
    meta-information, and any number of block-level elements followed by any
    number of top-level sections. Each section may in turn contain any number
    of block-level elements followed by any number from the next section
    level, as shown in <xref linkend="ex-typicalchap"/>.</para>

    <example xml:id="ex-typicalchap"><info><title>A typical chapter</title></info>


      <programlisting>&lt;chapter&gt;&lt;title&gt;My Chapter&lt;/title&gt;
  &lt;para&gt; ... &lt;/para&gt;
  &lt;section&gt;&lt;title&gt;First Section&lt;/title&gt;
    &lt;para&gt; ... &lt;/para&gt;
    &lt;example&gt; ... &lt;/example&gt;
  &lt;/section&gt;
&lt;/chapter&gt;</programlisting>
    </example>
  </section>

  <section xml:id="making-article"><info><title>Making an Article</title></info>


    <para><indexterm>
        <primary>article</primary>

        <secondary>creating</secondary>
      </indexterm><indexterm>
        <primary>elements</primary>

        <secondary>component-level</secondary>
      </indexterm><indexterm>
        <primary>components</primary>

        <secondary>elements</secondary>
      </indexterm><indexterm>
        <primary>journal articles</primary>
      </indexterm><indexterm>
        <primary>white papers, creating</primary>
      </indexterm>For documents smaller than a book, such as journal articles,
    white papers, or technical notes, <tag>article</tag> is frequently
    the most logical starting point. The body of an <tag>article</tag>
    is essentially the same as the body of a <tag>chapter</tag> or any
    other component-level element, as shown in <xref linkend="ex-typicalart"/>.</para>

    <para><tag>article</tag>s may include
    <tag>appendix</tag>es, <tag>bibliography</tag>s,
    <tag>index</tag>es, and <tag>glossary</tag>s.<indexterm>
        <primary>examples</primary>

        <secondary>article</secondary>
      </indexterm><indexterm>
        <primary>article</primary>

        <secondary>examples</secondary>
      </indexterm></para>

    <example xml:id="ex-typicalart"><info><title>A typical article</title></info>


      <programlisting>&lt;article&gt;
  &lt;info&gt;
    &lt;title&gt;My Article&lt;/title&gt;
    &lt;author&gt;&lt;honorific&gt;Dr&lt;/honorific&gt;&lt;firstname&gt;Emilio&lt;/firstname&gt;
            &lt;surname&gt;Lizardo&lt;/surname&gt;&lt;/author&gt;
  &lt;/info&gt;
  &lt;para&gt; ... &lt;/para&gt;
  &lt;section&gt;&lt;title&gt;On the Possibility of Going Home&lt;/title&gt;
    &lt;para&gt; ... &lt;/para&gt;
  &lt;/section&gt;
  &lt;bibliography&gt; ... &lt;/bibliography&gt;
&lt;/article&gt;</programlisting>
    </example>
  </section>

  <section xml:id="making-refentry"><info><title>Making a Reference Page</title></info>


    <para><indexterm>
        <primary>reference pages</primary>

        <secondary>creating</secondary>
      </indexterm><indexterm>
        <primary>manual page, creating</primary>
      </indexterm><indexterm>
        <primary>UNIX</primary>

        <secondary>manpage</secondary>
      </indexterm><indexterm>
        <primary>manpage (UNIX)</primary>
      </indexterm>The reference page or manual page in DocBook was inspired
    by, and in fact designed to reproduce, the common <acronym>UNIX</acronym>
    <quote>manpage</quote> concept. (We use the word <quote>page</quote>
    loosely here to mean a document of variable length containing reference
    material on a specific topic.) DocBook is rich in markup tailored for such
    documents, which often vary greatly in content, however well structured
    they may be. To reflect both the structure and the variability of such
    texts, DocBook specifies that reference pages have a strict sequence of
    parts, even though several of them are actually optional.</para>

    <para><indexterm>
        <primary>refentry element</primary>

        <secondary>elements, obligatory</secondary>
      </indexterm><indexterm>
        <primary>refnamediv element</primary>
      </indexterm><indexterm>
        <primary>refsect1 element</primary>
      </indexterm>Of the following sequence of elements that may appear in a
    <tag class="element">refentry</tag>, only two are obligatory:
    <tag class="element">refnamediv</tag> and either <tag class="element">refsect1</tag> or <tag class="element">refsection</tag>.</para>

    <variablelist>
      <varlistentry>
        <term><tag class="element">info</tag></term>

        <listitem>
          <para><indexterm>
              <primary>info element</primary>

              <secondary>reference page, meta-information</secondary>
            </indexterm><indexterm>
              <primary>meta-information</primary>

              <secondary>reference page</secondary>
            </indexterm>The <tag class="element">info</tag> element
          contains meta-information about the reference page (which should not
          be confused with <tag class="element">refmeta</tag>, which
          it precedes). It marks up information about the author of the
          document, or the product to which it pertains, or the document’s
          revision history, or other such information.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><tag class="element">refmeta</tag></term>

        <listitem>
          <para><indexterm>
              <primary>refmeta element</primary>
            </indexterm><indexterm>
              <primary>titles</primary>

              <secondary>reference pages</secondary>
            </indexterm><indexterm>
              <primary>volume number (reference page)</primary>
            </indexterm><indexterm>
              <primary>manvolnum</primary>
            </indexterm><indexterm>
              <primary>UNIX</primary>

              <secondary>manvolnum</secondary>
            </indexterm><indexterm>
              <primary>uname command and uname function,
              distinguishing</primary>
            </indexterm><tag class="element">refmeta</tag> contains a
          title for the reference page (which may be inferred if the
          <tag>refmeta</tag> element is not present) and an indication
          of the volume number in which this reference page occurs. The
          <tag>manvolnum</tag> is a very
          <acronym>UNIX</acronym>-centric concept. In traditional
          <acronym>UNIX</acronym> documentation, the subject of a reference
          page is typically identified by name and volume number; this allows
          you to distinguish between the <command>uname</command> command,
          <quote>uname(1)</quote> in volume 1 of the documentation, and the
          <function>uname</function> function, <quote>uname(3)</quote> in
          volume 3.</para>

          <para><indexterm>
              <primary>refmiscinfo element</primary>
            </indexterm>Additional information of this sort, such as
          conformance or vendor information specific to the particular
          environment you are working in, may be stored in
          <tag>refmiscinfo</tag>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><tag class="element">refnamediv</tag></term>

        <listitem>
          <para><indexterm>
              <primary>refnamediv element</primary>
            </indexterm><indexterm>
              <primary>refdescriptor element</primary>
            </indexterm><indexterm>
              <primary>refname element</primary>
            </indexterm><indexterm>
              <primary>refpurpose element</primary>
            </indexterm><indexterm>
              <primary>purpose (reference pages)</primary>
            </indexterm><indexterm>
              <primary>refclass element</primary>
            </indexterm><indexterm>
              <primary>operating systems</primary>

              <secondary>configurations, software support</secondary>
            </indexterm>The first obligatory element is <tag class="element">refnamediv</tag>, which is a wrapper for
          information about whatever you’re documenting, rather than the
          document itself. It can begin with a <tag class="element">refdescriptor</tag> if several items are being
          documented as a group and the group has a name. The <tag class="element">refnamediv</tag> must contain at least one
          <tag class="element">refname</tag>, that is, the name of
          whatever you’re documenting, and a single short statement that sums
          up the use or function of the item(s) at a glance: its <tag class="element">refpurpose</tag>. Also available is the <tag class="element">refclass</tag>, intended to detail the operating
          system configurations that the software element in question
          supports.</para>

          <para><indexterm>
              <primary>titles</primary>

              <secondary>reference pages</secondary>
            </indexterm><indexterm>
              <primary>refentrytitle element</primary>
            </indexterm>If no <tag>refentrytitle</tag> is given in the
          <tag>refmeta</tag>, the title of the reference page is the
          <tag>refdescriptor</tag>, if present, or the first
          <tag>refname</tag>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><tag class="element">refsynopsisdiv</tag></term>

        <listitem>
          <para><indexterm>
              <primary>refsynopsisdiv element</primary>
            </indexterm><indexterm>
              <primary>synopses</primary>

              <secondary>reference topics</secondary>
            </indexterm><indexterm>
              <primary>commands</primary>

              <secondary>syntax summary</secondary>
            </indexterm><indexterm>
              <primary>function prototype</primary>
            </indexterm><indexterm>
              <primary>title element</primary>
            </indexterm>A <tag class="element">refsynopsisdiv</tag> is
          intended to provide a quick synopsis of the topic covered by the
          reference page. For commands, this is generally a syntax summary of
          the command, and for functions, the function prototype, but other
          options are possible. A <tag class="element">title</tag> is
          allowed, but not required, presumably because the application that
          processes reference pages will generate the appropriate title if it
          is not given. In traditional <acronym>UNIX</acronym> documentation,
          its title is always <quote>Synopsis.</quote></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><tag>refsect1</tag>…<tag>refsect3</tag></term>

        <listitem>
          <para><indexterm>
              <primary>sections</primary>

              <secondary>refentry, levels</secondary>
            </indexterm><indexterm>
              <primary>refsect1…refsect3</primary>
            </indexterm>Within <tag>refentry</tag>s, there are only
          three levels of sectioning elements: <tag>refsect1</tag>,
          <tag>refsect2</tag>, and <tag>refsect3</tag>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><tag>refsection</tag></term>

        <listitem>
          <para><indexterm>
              <primary>refsection</primary>
            </indexterm>As with <tag>sect1</tag>,
          <tag>sect2</tag>, etc., there is a recursive version of the
          reference section <phrase role="keep-together">elements</phrase>:
          <tag>refsection</tag>.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para><xref linkend="ex-samprefpage"/> shows the beginning of a <tag class="element">refentry</tag> that illustrates one possible reference
    page.<indexterm>
        <primary>reference pages</primary>

        <secondary>sample page</secondary>
      </indexterm></para>

    <example xml:id="ex-samprefpage"><info><title>A sample reference page</title></info>


      <programlisting>&lt;refentry xml:id="printf"&gt;
  &lt;refmeta&gt;
    &lt;refentrytitle&gt;printf&lt;/refentrytitle&gt;
      &lt;manvolnum&gt;3S&lt;/manvolnum&gt;
  &lt;/refmeta&gt;

  &lt;refnamediv&gt;
    &lt;refname&gt;printf&lt;/refname&gt;
    &lt;refname&gt;fprintf&lt;/refname&gt;
    &lt;refname&gt;sprintf&lt;/refname&gt;
    &lt;refpurpose&gt;print formatted output&lt;/refpurpose&gt;
  &lt;/refnamediv&gt;

  &lt;refsynopsisdiv&gt;
    &lt;funcsynopsis&gt;
      &lt;funcsynopsisinfo&gt;
        #include &lt;stdio.h&gt;
      &lt;/funcsynopsisinfo&gt;

      &lt;funcprototype&gt;
        &lt;funcdef&gt;int &lt;function&gt;printf&lt;/function&gt;&lt;/funcdef&gt;
        &lt;paramdef&gt;const char *&lt;parameter&gt;format&lt;/parameter&gt;&lt;/paramdef&gt;
        &lt;varargs/&gt;
      &lt;/funcprototype&gt;

      &lt;funcprototype&gt;
        &lt;funcdef&gt;int &lt;function&gt;fprintf&lt;/function&gt;&lt;/funcdef&gt;
        &lt;paramdef&gt;FILE *&lt;parameter&gt;strm&lt;/parameter&gt;&lt;/paramdef&gt;
        &lt;paramdef&gt;const char *&lt;parameter&gt;format&lt;/parameter&gt;&lt;/paramdef&gt;
        &lt;varargs/&gt;
      &lt;/funcprototype&gt;

      &lt;funcprototype&gt;
        &lt;funcdef&gt;int &lt;function&gt;sprintf&lt;/function&gt;&lt;/funcdef&gt;
        &lt;paramdef&gt;char *&lt;parameter&gt;s&lt;/parameter&gt;&lt;/paramdef&gt;
        &lt;paramdef&gt;const char *&lt;parameter&gt;format&lt;/parameter&gt;&lt;/paramdef&gt;
        &lt;varargs/&gt;
      &lt;/funcprototype&gt;
    &lt;/funcsynopsis&gt;

  &lt;/refsynopsisdiv&gt;

  &lt;refsect1&gt;&lt;title&gt;Description&lt;/title&gt;
    &lt;para&gt;&lt;indexterm&gt;&lt;primary&gt;functions&lt;/primary&gt;
                     &lt;secondary&gt;printf&lt;/secondary&gt;&lt;/indexterm&gt;
          &lt;indexterm&gt;&lt;primary&gt;printing function&lt;/primary&gt;&lt;/indexterm&gt;

      &lt;function&gt;printf&lt;/function&gt; places output on the standard
      output stream stdout.
    &lt;/para&gt;
  &lt;/refsect1&gt;
&lt;/refentry&gt;</programlisting>
    </example>
  </section>

  <section xml:id="ch02-makefrontback"><info><title>Making Front and Back Matter</title></info>


    <para><indexterm>
        <primary>front matter</primary>
      </indexterm><indexterm>
        <primary>back matter</primary>
      </indexterm><indexterm>
        <primary>indexes</primary>

        <secondary>creating</secondary>
      </indexterm><indexterm>
        <primary>glossaries</primary>

        <secondary>creating</secondary>
      </indexterm><indexterm>
        <primary>tables of contents</primary>

        <secondary>creating</secondary>
      </indexterm>DocBook contains markup for the usual variety of front and
    back matter necessary for books and articles: indexes, glossaries,
    bibliographies, and tables of contents. In many cases, these components
    are generated automatically, at least in part, from your document by an
    external processor, but you can create them by hand, and in either case,
    store them in DocBook.</para>

    <para><indexterm>
        <primary>markup</primary>

        <secondary>back matter, books and articles</secondary>
      </indexterm>Some forms of back matter, such as indexes and glossaries,
    usually require additional markup <emphasis>in the document</emphasis> to
    make generation by an application possible. Bibliographies are usually
    composed by hand like the rest of your text, unless you are automatically
    selecting bibliographic entries out of some larger database. Our principal
    concern here is to acquaint you with the kind of markup you need to
    include in your documents if you want to construct these
    components.</para>

    <para>Front matter, like the table of contents, is almost always generated
    automatically from the text of a document by the processing application.
    If you need information about how to mark up a table of contents in
    DocBook, please consult the reference page for
    <tag>toc</tag>.</para>

    <section xml:id="makeindex"><info><title>Making an Index</title></info>


      <para><indexterm>
          <primary>indexes</primary>

          <secondary>marking index terms</secondary>
        </indexterm> <indexterm class="startofrange" xml:id="idx.makeindex">
          <primary>indexes</primary>

          <secondary>creating</secondary>
        </indexterm>In some highly structured documents such as reference
      manuals, you can automate the whole process of generating an index
      successfully without altering or adding to the original source. You can
      design a processing application to select the information and compile it
      into an adequate index. But this is rare.</para>

      <para>In most cases—and even in the case of some reference manuals—a
      useful index still requires human intervention to mark occurrences of
      words or concepts that will appear in the text of the index.</para>

      <section xml:id="s.indexterms"><info><title>Marking index terms</title></info>


        <para><indexterm>
            <primary>singular index markers</primary>
          </indexterm><indexterm>
            <primary>ranges, index entries</primary>
          </indexterm>DocBook distinguishes two kinds of index markers: those
        that are singular and result in a single page entry in the index
        itself, and those that are multiple and refer to a range of
        pages.</para>

        <para>You put a singular index marker where the subject it refers to
        actually occurs in your text:<indexterm>
            <primary>examples</primary>

            <secondary>indexing</secondary>
          </indexterm></para>

        <programlisting>&lt;para&gt;
  &lt;indexterm&gt;&lt;primary&gt;Big Cats&lt;/primary&gt;
  &lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt;
  The tiger is a very large cat indeed.
&lt;/para&gt;</programlisting>

        <para><indexterm>
            <primary>primary level index entries</primary>
          </indexterm><indexterm>
            <primary>secondary level index entries</primary>
          </indexterm><indexterm>
            <primary>tertiary level index entries</primary>
          </indexterm>This index term has two levels,
        <tag>primary</tag> and <tag>secondary</tag>. They
        correspond to an increasing amount of indented text in the resultant
        index. DocBook allows for three levels of index terms, with the third
        labeled <tag>tertiary</tag>.</para>

        <para><indexterm>
            <primary>starting index terms (ranges)</primary>
          </indexterm><indexterm>
            <primary>ending index terms (ranges)</primary>
          </indexterm>There are two ways that you can index a range of text.
        The first is to put index marks at both the beginning and end of the
        discussion. The mark at the beginning asserts that it is the start of
        a range, and the mark at the end refers back to the beginning. In this
        way, the processing application can determine what range of text is
        indexed. Here’s the previous tiger example recast as starting and
        ending index terms:<indexterm>
            <primary>examples</primary>

            <secondary>indexing</secondary>
          </indexterm></para>

        <programlisting>&lt;para&gt;
  &lt;indexterm xml:id="tiger-desc" class="startofrange"&gt;
  &lt;primary&gt;Big Cats&lt;/primary&gt;
  &lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt;
  The tiger is a very large cat indeed…
&lt;/para&gt;
⋮
&lt;para&gt;
So much for tigers&lt;indexterm startref="tiger-desc" class="endofrange"/&gt;.
Let's talk about leopards.
&lt;/para&gt;</programlisting>

        <para><indexterm>
            <primary>xml:id</primary>

            <secondary>index entries, ranges</secondary>
          </indexterm><indexterm>
            <primary>class attribute</primary>

            <secondary>index entries, ranges</secondary>
          </indexterm>Note that the mark at the start of the range identifies
        itself as the start of a range with the <tag class="attribute">class</tag> attribute, and provides an <tag class="attribute">xml:id</tag>. The mark at the end of the range
        points back to the start.</para>

        <para><indexterm>
            <primary>indexes</primary>

            <secondary>zone attribute, using</secondary>
          </indexterm><indexterm>
            <primary>zone attribute (indexterm)</primary>
          </indexterm>Another way to mark up a range of text is to specify
        that the entire content of an element, such as a chapter or section,
        is the complete range. In this case, all you need is for the index
        term to point to the <tag class="attribute">xml:id</tag> of
        the element that contains the content in question. The <tag class="attribute">zone</tag> attribute of
        <tag>indexterm</tag> provides this functionality.</para>

        <para>One of the interesting features of this method is that the
        actual index marks do not have to occur anywhere near the text being
        indexed. It is possible to collect all of them together, for example,
        in one file, but it is not invalid to have the index marker occur near
        the element it indexes.</para>

        <para>Suppose the discussion of tigers in your document comprises a
        whole text object (such as a <tag class="element">sect1</tag>
        or a <tag class="element">chapter</tag>) with an <tag class="attribute">xml:id</tag> value of
        <literal>tiger-desc</literal>. You can put the following tag anywhere
        in your document to index that range of text:<indexterm>
            <primary>examples</primary>

            <secondary>indexing</secondary>
          </indexterm></para>

        <programlisting>&lt;indexterm zone="tiger-desc"&gt;
&lt;primary&gt;Big Cats&lt;/primary&gt;
&lt;secondary&gt;Tigers&lt;/secondary&gt;&lt;/indexterm&gt;</programlisting>

        <para><indexterm>
            <primary>see and see also index entries</primary>
          </indexterm>DocBook also contains markup for index hits that point
        to other index hits (e.g., “See Cats, big” or “See also Lions”). See
        the reference pages for <tag>see</tag> and
        <tag>seealso</tag>.<indexterm class="endofrange" startref="idx.makeindex"/></para>
      </section>

      <section xml:id="s.printindex"><info><title>Printing an index</title></info>


        <para><indexterm>
            <primary>indexes</primary>

            <secondary>printing</secondary>
          </indexterm>After you have added the appropriate markup to your
        document, an external application can use this information to build an
        index. The resultant index must have <phrase role="keep-together">information</phrase> about the page numbers on
        which the concepts appear. It’s usually the document formatter that
        builds the index. In this case, it may never be instantiated in
        <phrase role="keep-together">DocBook</phrase>.</para>

        <para><indexterm>
            <primary>indexes</primary>

            <secondary>example</secondary>
          </indexterm><indexterm>
            <primary>examples</primary>

            <secondary>indexing</secondary>
          </indexterm>However, there are applications that can produce an
        index marked up in DocBook. The following example includes some one-
        and two-level <tag class="element">indexentry</tag> elements
        (which correspond to the primary and secondary levels in the
        <tag>indexterm</tag>s themselves) that begin with the letter
        D:</para>

        <programlisting>&lt;index&gt;&lt;title&gt;Index&lt;/title&gt;
  &lt;indexdiv&gt;&lt;title&gt;D&lt;/title&gt;
    &lt;indexentry&gt;
      &lt;primaryie&gt;database (bibliographic), 253, 255&lt;/primaryie&gt;
         &lt;secondaryie&gt;structure, 255&lt;/secondaryie&gt;
         &lt;secondaryie&gt;tools, 259&lt;/secondaryie&gt;
    &lt;/indexentry&gt;
    &lt;indexentry&gt;
      &lt;primaryie&gt;dates (language specific), 179&lt;/primaryie&gt;
    &lt;/indexentry&gt;
    &lt;indexentry&gt;
      &lt;primaryie&gt;DC fonts, &lt;emphasis&gt;172&lt;/emphasis&gt;, 177&lt;/primaryie&gt;
         &lt;secondaryie&gt;Math fonts, 177&lt;/secondaryie&gt;
    &lt;/indexentry&gt;
  &lt;/indexdiv&gt;
&lt;/index&gt;</programlisting>

        <para>The structure of <tag>indexentry</tag> is parallel to
        the structure of <tag>indexterm</tag>. Where
        <tag>indexterm</tag> has <tag>primary</tag>,
        <tag>secondary</tag>, <tag>tertiary</tag>,
        <tag>see</tag>, and <tag>seealso</tag>,
        <tag>indexentry</tag> has <tag>primaryie</tag>,
        <tag role="keep-together">secondaryie</tag>,
        <tag>tertiaryie</tag>, <tag>seeie</tag>, and
        <tag>seealsoie</tag>.</para>
      </section>
    </section>

    <section xml:id="s.glossary"><info><title>Making a Glossary</title></info>


      <para><indexterm class="startofrange" xml:id="idx.s.glossary">
          <primary>glossaries</primary>

          <secondary>creating</secondary>
        </indexterm>A <tag>glossary</tag>, like a
      <tag>bibliography</tag>, is often constructed by hand. However,
      some applications are capable of building a skeletal index from glossary
      term markup in the document. If all of your terms are defined in some
      glossary database, it may even be possible to construct the complete
      glossary automatically.</para>

      <para><indexterm>
          <primary>markup</primary>

          <secondary>glossaries</secondary>
        </indexterm><indexterm>
          <primary>glossterm element</primary>
        </indexterm><indexterm>
          <primary>linkend attribute</primary>

          <secondary>glossterm tag</secondary>
        </indexterm><indexterm>
          <primary>ID attribute</primary>

          <secondary>glossary entries</secondary>
        </indexterm><indexterm>
          <primary>linking</primary>

          <secondary>glossary terms to glossary entries</secondary>
        </indexterm><indexterm>
          <primary>glossaries</primary>

          <secondary>linking</secondary>
        </indexterm>To enable automatic glossary generation, or simply
      automatic linking from glossary terms in the text to glossary entries,
      you must add markup to your documents. In the text, you mark up a term
      for compilation later with the inline <tag>glossterm</tag> tag.
      This tag can have a <tag class="attribute">linkend</tag>
      attribute whose value is the ID of the actual entry in the
      glossary.<footnote>
          <para>Some formatters are able to establish the link by examining
          the content of the terms and the glossary. In that case, the author
          does not need to make explicit links.</para>
        </footnote></para>

      <para>For instance, if you have this markup in your document:</para>

      <programlisting>&lt;glossterm linkend="xml"&gt;Extensible Markup Language&lt;/glossterm&gt; is a new standard… </programlisting>

      <para><indexterm>
          <primary>glossaries</primary>

          <secondary>example</secondary>
        </indexterm> <indexterm>
          <primary>examples</primary>

          <secondary>glossaries</secondary>
        </indexterm>your glossary might look like this:</para>

      <programlisting>&lt;glossary&gt;&lt;title&gt;Example Glossary&lt;/title&gt;
⋮
  &lt;glossdiv&gt;&lt;title&gt;E&lt;/title&gt;

    &lt;glossentry xml:id="xml"&gt;&lt;glossterm&gt;Extensible Markup Language&lt;/glossterm&gt;
      &lt;acronym&gt;XML&lt;/acronym&gt;
      &lt;glossdef&gt;
       &lt;para&gt;Some reasonable definition here.&lt;/para&gt;
       &lt;glossseealso otherterm="sgml"&gt;
      &lt;/glossdef&gt;
    &lt;/glossentry&gt;

  &lt;/glossdiv&gt;
⋮
&lt;/glossary&gt;</programlisting>

      <para>Note that the <tag class="element">glossterm</tag> tag
      reappears in the glossary to mark up the term and distinguish it from
      its definition within the <tag class="element">glossentry</tag>.
      The <tag class="attribute">xml:id</tag> that the <tag class="element">glossentry</tag> referenced in the text is the
      <acronym>ID</acronym> of the <tag class="element">glossentry</tag> in the <tag>glossary</tag>
      itself. You can use the link between source and glossary to create a
      link in electronic formats, as we have done with the HTML and PDF forms
      of the glossary in this book.</para>

      <para>You can use the <tag class="attribute">baseform</tag>
      attribute on <tag>glossterm</tag> and
      <tag>firstterm</tag> when the term marked up in context is in a
      different form, for example, plural. Here is an example:</para>

      <programlisting>&lt;para&gt;
  Using &lt;glossterm baseform="DTD"&gt;DTDs&lt;/glossterm&gt; can
  be hazardous to your sanity.
&lt;/para&gt;</programlisting>
    </section>

    <section xml:id="s.bibliography"><info><title>Making a Bibliography</title></info>


      <para><indexterm>
          <primary>bibliographies, creating</primary>
        </indexterm><indexterm>
          <primary>raw data</primary>

          <secondary>bibliographies</secondary>
        </indexterm><indexterm>
          <primary>cooked data</primary>

          <secondary>bibliographies</secondary>
        </indexterm><indexterm>
          <primary>biblioentry element</primary>
        </indexterm>There are two ways to set up a bibliography in DocBook:
      you can have the data <firstterm>raw</firstterm> or
      <firstterm>cooked</firstterm>. When you use <quote>raw</quote> data, you
      wrap your entry in the <tag>biblioentry</tag> element and mark
      up each item individually. The processor determines the display order
      and <phrase role="keep-together">supplies</phrase> punctuation. When you
      use <quote>cooked</quote> data, you wrap your entry in the <tag role="keep-together">bibliomixed</tag> and provide the data in the
      order in which you want it displayed, and you include the
      punctuation.</para>

      <para>Here’s an example of a raw bibliographical item, wrapped in the
      <tag class="element">biblioentry</tag> element:<indexterm>
          <primary>examples</primary>

          <secondary>biblioentry</secondary>
        </indexterm></para>

      <programlisting>&lt;biblioentry xreflabel="Kites75"&gt;
  &lt;authorgroup&gt;
    &lt;author&gt;&lt;firstname&gt;Andrea&lt;/firstname&gt;&lt;surname&gt;Bahadur&lt;/surname&gt;&lt;/author&gt;
    &lt;author&gt;&lt;firstname&gt;Mark&lt;/firstname&gt;&lt;surname&gt;Shwarek&lt;/surname&gt;&lt;/author&gt;
  &lt;/authorgroup&gt;
  &lt;copyright&gt;&lt;year&gt;1974&lt;/year&gt;&lt;year&gt;1975&lt;/year&gt;
     &lt;holder&gt;Product Development International Holding N. V.&lt;/holder&gt;
     &lt;/copyright&gt;
  &lt;isbn&gt;0-88459-021-6&lt;/isbn&gt;
  &lt;publisher&gt;
    &lt;publishername&gt;Plenary Publications International, Inc.&lt;/publishername&gt;
  &lt;/publisher&gt;
  &lt;title&gt;Kites&lt;/title&gt;
  &lt;subtitle&gt;Ancient Craft to Modern Sport&lt;/subtitle&gt;
  &lt;pagenums&gt;988-999&lt;/pagenums&gt;
  &lt;seriesinfo&gt;
    &lt;title&gt;The Family Creative Workshop&lt;/title&gt;
    &lt;seriesvolnums&gt;1-22&lt;/seriesvolnums&gt;
    &lt;editor&gt;
      &lt;firstname&gt;Allen&lt;/firstname&gt;
      &lt;othername role=middle&gt;Davenport&lt;/othername&gt;
      &lt;surname&gt;Bragdon&lt;/surname&gt;
      &lt;contrib&gt;Editor in Chief&lt;/contrib&gt;
    &lt;/editor&gt;
  &lt;/seriesinfo&gt;
&lt;/biblioentry&gt;</programlisting>

      <para>The <quote>raw</quote> data in a <tag class="element">biblioentry</tag> is comprehensive to a fault—there
      are enough fields to suit a host of different bibliographical styles,
      and that is the point. An abundance of data requires processing
      applications to select, punctuate, order, and format the <phrase role="keep-together">bibliographical</phrase> data, and it is unlikely
      that all the information provided will actually be output.</para>

      <para><indexterm>
          <primary>bibliomixed element</primary>
        </indexterm>All the <quote>cooked</quote> data in a <tag class="element">bibliomixed</tag> entry in a bibliography, on the
      other hand, is intended to be presented to the reader in the form and
      sequence in which it is provided. It even includes punctuation between
      the fields of data:<indexterm>
          <primary>examples</primary>

          <secondary>bibliomixed</secondary>
        </indexterm></para>

      <programlisting>&lt;bibliomixed&gt;
  &lt;bibliomset relation="article"&gt;
    &lt;surname&gt;Walsh&lt;/surname&gt;, &lt;firstname&gt;Norman&lt;/firstname&gt;.
    &lt;title role="article"&gt;Introduction to Cascading Style Sheets&lt;/title&gt;.
  &lt;/bibliomset&gt;
  &lt;bibliomset relation="journal"&gt;
    &lt;title&gt;The World Wide Web Journal&lt;/title&gt;
    &lt;volumenum&gt;2&lt;/volumenum&gt;&lt;issuenum&gt;1&lt;/issuenum&gt;.
    &lt;publishername&gt;O'Reilly &amp; Associates, Inc.&lt;/publishername&gt; and
    &lt;corpname&gt;The World Wide Web Consortium&lt;/corpname&gt;.
    &lt;pubdate&gt;Winter, 1996&lt;/pubdate&gt;&lt;/bibliomset&gt;.
&lt;/bibliomixed&gt;
</programlisting>

      <para>Clearly, these two ways of marking up bibliographical entries are
      suited to different circumstances. You should use one or the other for
      your bibliography, not both. Strictly speaking, mingling the raw and the
      cooked may be <quote>kosher</quote> as far as the schema is concerned,
      but it will almost certainly cause problems for most processing
      applications.<indexterm class="endofrange" startref="documentsDocBookch02"/><indexterm class="endofrange" startref="idx.s.glossary"/></para>
    </section>
  </section>
</chapter>
