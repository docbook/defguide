<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="ch-publish">
<?dbhtml filename="ch04.html"?>
<info>
<title>Publishing DocBook Documents</title>
<pubdate>$Date$</pubdate>
<releaseinfo>$Revision$</releaseinfo>
</info>

<para><indexterm>
      <primary>DocBook</primary>

      <secondary>publishing documents</secondary>
    </indexterm><indexterm>
      <primary>publishing DocBook documents</primary>
    </indexterm><indexterm>
      <primary>stylesheets</primary>

      <secondary>publishing documents</secondary>
    </indexterm><indexterm>
      <primary>HTML</primary>

      <secondary>translating XML documents</secondary>
    </indexterm>Creating and validating <acronym>XML</acronym> documents is
  usually only half the battle. After you’ve composed your document, you’ll
  want to publish it. Publishing, for our purposes, means either print or web
  publishing. For <acronym>XML</acronym> documents, this is usually
  accomplished with some kind of <glossterm>stylesheet</glossterm>. In some
  environments, it is now possible to publish an <acronym>XML</acronym>
  document on the Web simply by putting it online with a stylesheet.</para>

  <section xml:id="stylesurvey"><info><title>A Survey of Stylesheet Languages</title></info>
    

    <para><indexterm class="startofrange" xml:id="idx.stylesheets">
        <primary>stylesheets</primary>

        <secondary>languages</secondary>
      </indexterm><indexterm>
        <primary>languages</primary>

        <secondary>stylesheet</secondary>
      </indexterm>Over the years, a number of attempts have been made to
    produce a standard stylesheet language and, failing that, a large number
    of proprietary languages have been developed. Since this book was first
    written, three standards have emerged as the clear <phrase role="keep-together">frontrunners</phrase>:</para>

    <variablelist>
      <varlistentry>
        <term><acronym>CSS</acronym></term>

        <listitem>
          <para><indexterm>
              <primary>CSS</primary>
            </indexterm><indexterm>
              <primary>HTML</primary>

              <secondary>CSS</secondary>
            </indexterm><indexterm>
              <primary>XML</primary>

              <secondary>CSS</secondary>
            </indexterm>The <acronym>W3C</acronym> <acronym>CSS</acronym>
          Working Group created <acronym>CSS</acronym> as a style attachment
          language for <acronym>HTML</acronym>. It has also been advanced as a
          stylesheet language for <acronym>XML</acronym>. Some browsers will
          style arbitrary <acronym>XML</acronym> with <acronym>CSS</acronym>
          and some commercial products exist that will render
          <acronym>XML</acronym>+<acronym>CSS</acronym> either online or in
          print.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><acronym>XSL</acronym></term>

        <listitem>
          <para><indexterm>
              <primary>XSL</primary>
            </indexterm><indexterm>
              <primary>XML</primary>

              <secondary>XSL</secondary>
            </indexterm><indexterm>
              <primary>Extensible Stylesheet Language</primary>

              <see>XSL</see>
            </indexterm><acronym>XSLT</acronym> 1.0 is well established and is
          probably the most common styling technology for DocBook.
          <acronym>XSLT</acronym> 2.0 offers a number of important new
          features (at the expense of some complexity, naturally) and is
          growing in popularity.</para>

          <para>It’s worth observing that there are two, related technologies
          in play here. <acronym>XSLT</acronym> 1.0 and 2.0, the
          transformation languages, and <acronym>XSL</acronym> Formatting
          Objects (<acronym>XSL-FO</acronym>). <acronym>XSL</acronym>-FO is an
          <acronym>XML</acronym> vocabulary for describing constraints on page
          layout.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>XQuery</term>

        <listitem>
          <para><indexterm>
              <primary>XQuery</primary>
            </indexterm><indexterm>
              <primary>XML</primary>

              <secondary>XQuery</secondary>
            </indexterm><indexterm>
              <primary>XML Query Language</primary>

              <see>XQuery</see>
            </indexterm>XQuery 1.0, developed in parallel with
          <acronym>XPath</acronym> 2.0, provides a different set of features
          than <acronym>XSL</acronym>, but can be used to transform DocBook
          into other formats.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section xml:id="styleexamples"><info><title>Stylesheet Examples</title></info>
      

      <para><indexterm>
          <primary>stylesheets</primary>

          <secondary>examples</secondary>
        </indexterm>By way of comparison, here’s an example of each of the
      standard style languages. In each case, the stylesheet fragment shown
      contains the rules that reasonably formatted the following
      paragraph:</para>

      <screen>&lt;para&gt;This is an example paragraph. It should be presented in a
reasonable body font. &lt;emphasis&gt;Emphasized&lt;/emphasis&gt; words
should be printed in italics. A single level of 
&lt;emphasis&gt;Nested &lt;emphasis&gt;emphasis&lt;/emphasis&gt; should also
be supported.&lt;/emphasis&gt;
&lt;/para&gt;</screen>

      <section xml:id="s.css"><info><title><acronym>CSS</acronym> stylesheet</title></info>
        

        <para><indexterm>
            <primary>CSS</primary>

            <secondary>example</secondary>
          </indexterm><acronym>CSS</acronym> stylesheets consist of selectors
        and formatting properties, as shown in <xref linkend="ex-css"/>.</para>

        <example xml:id="ex-css">
          <info><title>A fragment of a <acronym>CSS</acronym> stylesheet</title>
            
          </info>

          

          <programlisting>@namespace "http://docbook.org/ns/docbook"

para              { display: block }
emphasis          { display: inline;
                    font-style: italic; }
emphasis emphasis { display: inline;
                    font-style: normal; }</programlisting>
        </example>

        <para>As this edition is being written, namespace selection in
        <acronym>CSS</acronym>, while widely supported, is still a Candidate
        Recommendation at W3C.</para>
      </section>

      <section xml:id="s.xsl"><info><title><acronym>XSL</acronym> stylesheet</title></info>
        

        <para><indexterm>
            <primary>XSL stylesheets</primary>

            <secondary>example</secondary>
          </indexterm><acronym>XSL</acronym> stylesheets are
        <acronym>XML</acronym> documents, as shown in <xref linkend="ex-xsl"/>. The element in the <acronym>XSL</acronym>
        stylesheet that controls the presentation of specific elements is the
        <tag namespace="http://www.w3.org/1999/XSL/Transform">xsl:template</tag>
        <phrase role="keep-together">element</phrase>.</para>

        <example xml:id="ex-xsl">
          <info><title>A fragment of an <acronym>XSL</acronym> stylesheet</title>
            
          </info>

          

          <programlisting>&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:fo="http://www.w3.org/1999/XSL/Format"
                xmlns:db="http://docbook.org/ns/docbook"
                version="1.0"&gt;

&lt;xsl:template match="db:para"&gt;   
  &lt;fo:block&gt;
    &lt;xsl:apply-templates/&gt;  
  &lt;/fo:block&gt;
&lt;/xsl:template&gt;  

&lt;xsl:template match="db:emphasis"&gt;
  &lt;fo:inline font-style="italic"&gt;
    &lt;xsl:apply-templates/&gt;  
  &lt;/fo:inline&gt;
&lt;/xsl:template&gt;  

&lt;xsl:template match="db:emphasis/db:emphasis"&gt;
  &lt;fo:inline font-style="normal"&gt;
    &lt;xsl:apply-templates/&gt;  
  &lt;/fo:inline&gt;
&lt;/xsl:template&gt;  

&lt;/xsl:stylesheet&gt;</programlisting>
        </example>

        <para>A complete stylesheet for generating an entire
        <acronym>XSL</acronym>-FO document would require additional
        boilerplate text not shown.</para>
      </section>

      <section xml:id="s.xquery"><info><title>XQuery</title></info>
        

        <para><indexterm>
            <primary>XQuery</primary>

            <secondary>example</secondary>
          </indexterm><acronym>XQuery</acronym> is expressed in a mixture of
        text and <acronym>XML</acronym> fragments, as shown in <xref linkend="ex-xquery"/>.</para>

        <example xml:id="ex-xquery">
          <info><title>A fragment of XQuery</title>
            
          </info>

          

          <programlisting>xquery version "1.0";

declare default function namespace "http://www.w3.org/2005/xpath-functions";

declare namespace db="http://docbook.org/ns/docbook";
declare namespace fo="http://www.w3.org/1999/XSL/Format";

declare function local:convert($node as node()) as node()* {
  if (empty($node))
  then
    ()
  else
    typeswitch ($node)
      case text() return $node
      case document-node() return local:convert($node/node())
      case element(db:para) return local:para($node)
      case element(db:emphasis) return local:emphasis($node)
      default return ("ERROR: UNEXPECTED NODE", local:convert($node/node()))
};

declare function local:para($node as element()) as element() {
  &lt;fo:block&gt;
    { local:convert($node/node()) }
  &lt;/fo:block&gt;
};

declare function local:emphasis($node as element()) as element() {
  if ($node/parent::db:emphasis)
  then
    &lt;fo:inline font-style="normal"&gt;
      { local:convert($node/node()) }
    &lt;/fo:inline&gt;
  else
    &lt;fo:inline font-style="italic"&gt;
      { local:convert($node/node()) }
    &lt;/fo:inline&gt;
};</programlisting>
        </example>

        <para>A complete query for generating an <acronym>XSL</acronym>-FO
        document would require additional boilerplate text not shown.</para>
      </section>
    </section>
  </section>

  <section xml:id="xsl"><info><title>Using <acronym>XSL</acronym> to Publish DocBook Documents</title></info>
    

    <para><indexterm>
        <primary>stylesheets</primary>

        <secondary>sourceforge.net</secondary>
      </indexterm>The community of people using DocBook has created a set of
    open source <acronym>XSL</acronym> stylesheets that are maintained at
    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://sourceforge.net/projects/docbook">Sourceforge.net</link>.
    These stylesheets can be used to transform DocBook <acronym>XML</acronym>
    into a wide variety of formats, including <acronym>HTML</acronym>,
    Javahelp, <acronym>XSL-FO</acronym> (for processing into print), ePub, and
    <acronym>HTML</acronym> help.</para>

    <para>For a detailed discussion of using <acronym>XSL</acronym> to publish
    DocBook documents, see <citetitle>DocBook XSL: The Complete
    Guide</citetitle> <biblioref linkend="Stayton07"/>.</para>

    <indexterm class="endofrange" startref="idx.stylesheets"/>
  </section>
</chapter>