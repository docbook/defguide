buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://maven.restlet.org" }
  }

  // Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
    }
  }

  dependencies {
    classpath group: 'com.nwalsh', name: 'nwalsh-annotations', version: '1.0.0'
    classpath group: 'org.atteo.classindex', name: 'classindex', version: '3.3'
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: docbookXsltVersion
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.1.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.24-98'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '1.0.1'
  }
}

plugins {
  id "de.undercouch.download" version "2.0.0"
}

repositories {
  mavenLocal()
  mavenCentral()
}

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask
import de.undercouch.gradle.tasks.download.Download

defaultTasks 'tdg'

project.ext.docbookXslt = "docbook-xslt2-$docbookXsltVersion"

task gitLogSummary(type: Exec) {
  commandLine "../bin/git-log-summary"
  standardOutput = new FileOutputStream(new File("lib/gitlog.xml"))
}

task refpages(dependsOn: ['copyRefpages', 'refpageListElements', 'refpageListAssembly']) {
  // nothing to see here
}

task patterns(type: XMLCalabashTask) {
  inputs.file "lib/patterns.xml"
  inputs.file "../stylesheets/patterns.xsl"
  inputs.file "lib/$rnd"
  inputs.file "../xpl/style.xpl"
  outputs.file "build/patterns.xml"

  input("source", "lib/patterns.xml")
  input("stylesheet", "../stylesheets/patterns.xsl")
  output("result", "build/patterns.xml")
  param("rngfile", "../defguide5/lib/$rnd")
  pipeline "../xpl/style.xpl"

  doFirst {
    mkdir("build")
  }
}

// This section builds the reference pages. You'll need to update src/elements
// if you're getting a "file not found" error for some new element.
def elementList = new BufferedReader(new FileReader("src/elements"))
def line = elementList.readLine()
while (line != null) {
  if (!"".equals(line.trim()) && !line.startsWith("#")) {
    Task t = task "refpage_${line}"(dependsOn: ['gitLogSummary'], type: XMLCalabashTask) {
      inputs.dir "lib"
      inputs.file "../stylesheets/refentry.xsl"
      inputs.file "../xpl/refpage.xpl"
      outputs.file "build/elements/${line}.xml"
      input("source", new File("../refpages/elements/${line}.xml").getCanonicalPath())
      pipeline "../xpl/refpage.xpl"
    }
    refpages.dependsOn t
  }
  line = elementList.readLine()
}

task refpageListElements(type: XMLCalabashTask) {
  inputs.file "lib/$rnd"
  inputs.file "../stylesheets/elem-xi.xsl"
  inputs.file "../xpl/element-list.xpl"
  outputs.file "build/list-elements.xml"

  input("source", "lib/$rnd")
  output("result", "build/list-elements.xml")
  pipeline "../xpl/element-list.xpl"

  doFirst {
    mkdir("build")
  }
}

task refpageListAssembly(type: XMLCalabashTask) {
  inputs.file "lib/$rnd"
  inputs.file "../stylesheets/elem-xi.xsl"
  inputs.file "../xpl/element-list.xpl"
  outputs.file "build/list-assembly.xml"

  input("source", "lib/$rnd")
  output("result", "build/list-assembly.xml")
  pipeline "../xpl/element-list.xpl"
  option("manual","assembly")

  doFirst {
    mkdir("build")
  }
}

task copyRefpages(type: Copy) {
  FileCollection refpages = fileTree(dir: 'refpages')
  from refpages
  into "build/"

  doFirst {
    mkdir("build")
  }
}

task bookmeta(type: XMLCalabashTask) {
  inputs.file "src/bookinfo.xml"
  inputs.file "gradle.properties"
  outputs.file "build/bookinfo.xml"
  input("source", "src/bookinfo.xml")
  output("result", "build/bookinfo.xml")
  param("bookVersion", bookVersion)
  param("docbookVersion", docbookVersion)
  pipeline "../xpl/bookmeta.xpl"

  doFirst {
    mkdir("build")
  }
}

task tdgxml(dependsOn: ['bookmeta', 'patterns', 'refpages'], type: XMLCalabashTask) {
  inputs.dir "refpages"
  inputs.dir "src"
  inputs.dir "build/elements"
  inputs.file "../xpl/xinclude.xpl"
  outputs.file "build/tdg.xml"

  input("source", "src/book5.xml")
  output("result", "build/tdg.xml")
  pipeline "../xpl/xinclude.xpl"
}

task book(dependsOn: ['tdgxml'], type: XMLCalabashTask) {
  inputs.file file("build/tdg.xml")
  inputs.file file("../xpl/make-book.xpl")
  inputs.file file("../stylesheets/purpose.xsl")
  inputs.file file("../stylesheets/tdg2db.xsl")
  inputs.file file("../stylesheets/profile.xsl")
  outputs.file file("build/book.xml")

  input("source", "build/tdg.xml")
  output("result", "build/book.xml")
  option("arch", "assembly defguide5")
  option("revision", "5.0 5.1 5.2")
  // This crazy list of conditions is a side effect of the fact that
  // I carelessly decided to override the condition attribute for
  // something else in the reference pages. :-(
  option("condition", "expanded ref.desc.attribute-descriptions ref.desc.attributes ref.desc.children ref.desc.parents ref.description ref.desc.rules ref.desc.seealso ref.examples refpages web")
  pipeline "../xpl/make-book.xpl"
}

task copyCss(type: Copy) {
  from "../resources/css"
  into "build/html/css"
}

task copyJs(type: Copy) {
  from "../resources/js"
  into "build/html/js"
}

task copyHtaccess(type: Copy) {
  from "../resources/etc/"
  into "build/html/"
}

task copySourceFigs(type: Copy) {
  from "../resources/figs/"
  from "figs/"
  into "build/figs/"
}

task copyWebFigs(type: Copy) {
  from "../resources/figs/web"
  from "figs/web"
  into "build/html/figs/web/"
}

task copyFigs(dependsOn: ['copySourceFigs', 'copyWebFigs']) {
  // nothing to see here
}

task copyFiles(dependsOn: ['copyCss', 'copyJs', 'copyHtaccess', 'copyFigs']) {
  // nothing to see here
}

task tdg(dependsOn: ['book', 'copyFiles'], type: DocBookTask) {
  inputs.file "build/book.xml"
  outputs.dir "build/html"
  inputs.file "../stylesheets/chunk.xsl"
  inputs.file "../stylesheets/custom.xsl"

  input("source", "build/book.xml")
  option("style", "../stylesheets/chunk.xsl")
  param("output.dir", System.getProperty('user.dir') + "/build/")
  param("base.dir", "build/html/")
  param("html.ext", ".html")
  param("rngfile", "lib/$rnd")
  param("resource.root", "")
}

task tdg_fake(dependsOn: ['copyFiles']) {
  // nothing to see here
}

task test(dependsOn: ['tdg']) {
  // nothing to see here
}

task clean
clean.doFirst {
  delete "build"
}
