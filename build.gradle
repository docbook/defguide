buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.restlet.talend.com" }
  }

  // Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
    }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.5.0'
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.1.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.4.0'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.30-99'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '1.0.6'
    classpath group: 'gradle.plugin.com.dorongold.plugins', name: 'task-tree', version: '1.4'
  }
}

plugins {
  id "groovy"
  id "com.dorongold.task-tree" version "1.4"
  id "de.undercouch.download" version "4.0.4"
}

repositories {
  mavenLocal()
  mavenCentral()
}

// Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
    force 'org.xmlresolver:xmlresolver:1.0.1'
  }
}

configurations {
  saxonee
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  saxonee fileTree(dir: "lib/${saxonVersion}").include("*.jar")
  implementation (
    [group: 'net.sf.saxon', name: 'Saxon-HE', version: saxonVersion],
    [group: 'org.relaxng', name: 'jing', version: '20181204']
  )
  tools (
    [group: 'org.relaxng', name: 'jing', version: '20181204'],
    [group: 'org.relaxng', name: 'trang', version: '20181204']
  )
}

defaultTasks "dist"

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'
apply plugin: 'com.dorongold.task-tree'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask
import de.undercouch.gradle.tasks.download.Download

// This is all a complete hack that I worked out by trial and error
def eeAvailable = false
def peAvailable = false
def EXCP="${buildDir}/docbook/libs/docbook-xslTNG-${docbookXsltVersion}.jar"
if (saxonEE != "false" && (eeAvailable || peAvailable)) {
  configurations.saxonee.each { it ->
    EXCP += ":" + it
  }
} else {
  configurations.compileClasspath.each { it ->
    EXCP += ":" + it
  }
}

// ======================================================================

def absuri(String path) {
  def spath = path
  if (!spath.endsWith("/")) {
    spath = spath + "/"
  }
  def cpath = new File(spath).getCanonicalPath()
  return "file://" + cpath + "/"
}

// ======================================================================
// Define some globals

def books = ["defguide",
             "publishers",
             "sdocbook",
             "slides",
             "website"]

def bookVersion = ["defguide": defguideBookVersion,
                   "publishers": publishersBookVersion,
                   "sdocbook": sdocbookBookVersion,
                   "slides": slidesBookVersion,
                   "website": websiteBookVersion ]

def profileCondition = "expanded ref.desc.attribute-descriptions ref.desc.attributes ref.desc.children ref.desc.parents ref.description ref.desc.rules ref.desc.seealso ref.examples refpages web"

def bookCondition = ["defguide": profileCondition,
                     "publishers": profileCondition,
                     "sdocbook": profileCondition,
                     "slides": profileCondition,
                     "website": profileCondition]

def bookArch = ["defguide": "assembly defguide",
                "publishers": "publishers",
                "sdocbook": "sdocbook",
                "slides": "sdocbook slides",
                "website": "slides website"]

def bookRevision = ["defguide": "5.0 5.1 5.2",
                    "publishers": "5.0 5.1 5.2 1.0 1.1 1.2",
                    "sdocbook": "5.0 5.1 5.2",
                    "slides": "5.0 5.1 5.2",
                    "website": "5.0 5.1 5.2"]

// ======================================================================

task hello() {
  doFirst {
    println("Hello, world.")
  }
}

// ======================================================================
// Maven is broken. Or something. Anyway, the last couple of releases
// of the DocBook XSLT 2.0 Stylesheets that I've published have failed
// to turn up in Maven :-(
//
// Impatiently, I'm just getting a local copy

def docbookXsltZip = "docbook-xslTNG-${docbookXsltVersion}.zip"
task downloadDocBookXslt(type: Download) {
  src "${docbookXsltBaseUri}/${docbookXsltVersion}/${docbookXsltZip}"
  dest new File(buildDir, docbookXsltZip)
  // If we're going to d/l a new one, delete the old one
  doFirst {
    delete "build/docbook"
  }
}
downloadDocBookXslt.onlyIf { !file("$buildDir/$docbookXsltZip").exists() }

task unzipDocBookXslt(dependsOn: downloadDocBookXslt, type: Copy) {
  from zipTree(downloadDocBookXslt.dest)
  into { "build" }
}
unzipDocBookXslt.onlyIf { !file("$buildDir/docbook-xslt2-$docbookXsltVersion").exists() }

task getDocBookXslt(dependsOn: unzipDocBookXslt, type: Copy) {
  from { "build/docbook-xslTNG-" + docbookXsltVersion }
  into { "build/docbook" }
}
getDocBookXslt.onlyIf { !file("$buildDir/docbook").exists() }

// ======================================================================

task gitLogSummary(type: Exec) {
  inputs.file "tools/bin/git-log-summary"
  outputs.file "build/gitlog.xml"
  commandLine "tools/bin/git-log-summary", "-o", "build/gitlog.xml"
  doFirst {
    mkdir("build")
  }
}

task allBooks() {
  // just a dependency
}

task dist() {
  // just a dependency
}

clean {
  doFirst {
    delete("build")
  }
}

// ======================================================================
// Generate tasks parameterized by vocabulary

books.each { vocab ->
  def rndFile = new File("src/lib/${vocab}.rnd").getCanonicalPath()

  task "${vocab}_patterns"(type: XMLCalabashTask) {
    input("source", "src/${vocab}/patterns.xml")
    input("stylesheet", "tools/xsl/patterns.xsl")
    output("result", "build/${vocab}/patterns.xml")
    param("rngfile", rndFile)
    pipeline "tools/xpl/style.xpl"
    doFirst {
      mkdir("build/${vocab}")
    }
  }

  task "${vocab}_refpageExamples"(type: Copy) {
    from "src/refpages/examples"
    into "build/${vocab}/refpages/examples"
    include "*"
    doFirst {
      mkdir("build/${vocab}/refpages/examples")
    }
  }

  task "${vocab}_bookmeta"(type: XMLCalabashTask) {
    input("source", "src/${vocab}/bookinfo.xml")
    output("result", "build/${vocab}/bookinfo.xml")
    param("bookVersion", bookVersion[vocab])
    param("docbookVersion", docbookVersion)
    pipeline "tools/xpl/bookmeta.xpl"
    doFirst {
      mkdir("build/${vocab}")
    }
  }

  task "${vocab}_refpageListElements"(type: XMLCalabashTask) {
    inputs.file "tools/xsl/elem-xi.xsl"
    inputs.file "tools/xpl/element-list.xpl"
    input("source", rndFile)
    output("result", "build/${vocab}/list-elements.xml")
    pipeline "tools/xpl/element-list.xpl"
    doFirst {
      mkdir("build/${vocab}")
    }
  }

  task "${vocab}_copysrc"(type: Copy) {
    from "src/${vocab}"
    into "build/${vocab}"
    include "**/*"
    exclude "bookinfo.xml"
    exclude "patterns.xml"
    exclude "list-elements.xml"
    exclude "list-assembly.xml" // only in defguide, but harmless
  }

  task "${vocab}_copyresources"(dependsOn: ["${vocab}_copyresources_src",
                                            "${vocab}_copyresources_docbook"]) {
    // Once so the stylesheet can read the dimensions
    // Once so it's in the actual published output
  }

  task "${vocab}_copyresources_src"(type: Copy,
                                    dependsOn: ["${vocab}_copyresources_src_html"]) {
    from "src/resources"
    into "build/${vocab}"
    include "**/*"
    exclude "figs/src"
    exclude "figs/print"
  }

  task "${vocab}_copyresources_src_html"(type: Copy) {
    from "src/resources"
    into "build/${vocab}/html"
    include "**/*"
    exclude "figs/src"
    exclude "figs/print"
    doFirst {
      mkdir "build/${vocab}/html"
    }
  }

  task "${vocab}_copyresources_docbook"(type: Copy, dependsOn: ['getDocBookXslt']) {
    from "build/docbook/resources"
    into "build/${vocab}/html"
    include "**/*"
    doFirst {
      mkdir "build/${vocab}/html"
    }
  }

  task "${vocab}_tdgxml"(dependsOn: ["${vocab}_copysrc",
                                     "${vocab}_bookmeta",
                                     "${vocab}_patterns",
                                     "${vocab}_refpages",
                                     "${vocab}_copyresources_src",
                                     "${vocab}_copyresources_src_html",
                                     "${vocab}_copyresources_docbook"],
                         type: XMLCalabashTask) {
    inputs.dir "build/${vocab}"
    input("source", "build/${vocab}/book5.xml")
    output("result", "build/${vocab}/tdg.xml")
    pipeline "tools/xpl/xinclude.xpl"
  }

  task "${vocab}_refpages"(dependsOn: ["${vocab}_refpageListElements",
                                       "${vocab}_refpageExamples",
                                       "gitLogSummary"],
                           type: XMLCalabashTask) {
    inputs.dir "src/refpages/elements"
    inputs.file "tools/xsl/refentry.xsl"
    inputs.file "tools/xpl/refpages.xpl"
    inputs.file "src/${vocab}/seealso.xml"
    outputs.dir "build/${vocab}/refpages"
    option("rnd", rndFile)
    option("src", absuri("src/${vocab}/"))
    option("dst", absuri("build/${vocab}/refpages/"))
    outputs.dir "build/${vocab}/refpages"
    input("source", rndFile)
    pipeline "tools/xpl/refpages.xpl"
  }

  task "${vocab}"(type: Exec,
                  dependsOn: ["${vocab}_xml",
                              "${vocab}_copyresources", "getDocBookXslt"]) {
    inputs.file("${buildDir}/${vocab}/book.xml")
    inputs.file("tools/xsl/book.xsl")
    outputs.file("${buildDir}/${vocab}/html/index.html")
    commandLine "java", "-cp", EXCP, "net.sf.saxon.Transform",
                "-init:org.docbook.xsltng.extensions.Register",
                "${buildDir}/${vocab}/book.xml",
                "-xsl:tools/xsl/book.xsl",
                "-o:${buildDir}/${vocab}/html/index.html",
                "rngfile=${rndFile}",
                "docbookXsltVersion=${docbookXsltVersion}",
                "bookVersion=${bookVersion[vocab]}",
                "mediaobject-input-base-uri=file:${projectDir}/build/${vocab}/",
                "mediaobject-output-base-uri=./",
                "chunk=index.html",
                "chunk-output-base-uri=${buildDir}/${vocab}/html/",
                "profile-condition=${bookCondition[vocab]}",
                "profile-arch=${bookArch[vocab]}",
                'persistent-toc=true',
                "profile-revision=${bookRevision[vocab]}"
    doFirst {
      mkdir("${buildDir}/${vocab}/html")
    }
  }
  allBooks.dependsOn "${vocab}"

  task "${vocab}_dist"(type: Copy,
                       dependsOn: ["${vocab}"]) {
    def distTarget = "${buildDir}/dist/${vocab}/${docbookBaseVersion}"
    if (vocab == "defguide") {
      distTarget = "${buildDir}/dist/${docbookBaseVersion}"
    }
    into distTarget
    from "${buildDir}/${vocab}/html"
  }
  dist.dependsOn "${vocab}_dist"
}

// ======================================================================

defguide_refpages.dependsOn "defguide_refpageListAssembly"

task defguide_refpageListAssembly(type: XMLCalabashTask) {
  inputs.file "tools/xsl/elem-xi.xsl"
  inputs.file "tools/xpl/element-list.xpl"

  input("source", new File(defguideRnd).getCanonicalPath())
  output("result", "build/defguide/list-assembly.xml")
  pipeline "tools/xpl/element-list.xpl"

  option("manual","assembly")

  doFirst {
    mkdir("build")
  }
}

task defguide_xml(dependsOn: ['defguide_tdgxml', 'getDocBookXslt'], type: XMLCalabashTask) {
  inputs.file file("tools/xsl/purpose.xsl")
  inputs.file file("tools/xsl/tdg2db.xsl")
  inputs.file file("build/defguide/style/purpose.xsl")

  input("source", "build/defguide/tdg.xml")
  output("result", "build/defguide/book.xml")
  option("arch", "assembly defguide")
  option("revision", "5.0 5.1 5.2")
  // This crazy list of conditions is a side effect of the fact that
  // I carelessly decided to override the condition attribute for
  // something else in the reference pages. :-(
  option("condition", "expanded ref.desc.attribute-descriptions ref.desc.attributes ref.desc.children ref.desc.parents ref.description ref.desc.rules ref.desc.seealso ref.examples refpages web")
  pipeline "tools/xpl/make-book.xpl"
}

// ======================================================================

task publishers_xml(dependsOn: ['publishers_tdgxml', 'getDocBookXslt'], type: XMLCalabashTask) {
  inputs.file file("tools/xsl/purpose.xsl")
  inputs.file file("tools/xsl/tdg2db.xsl")
  inputs.file file("tools/xsl/profile.xsl")
  inputs.file file("build/publishers/style/purpose.xsl")

  input("source", "build/publishers/tdg.xml")
  output("result", "build/publishers/book.xml")
  option("arch", "publishers")
  option("revision", "5.0 5.1 5.2 1.0 1.1 1.2")
  // This crazy list of conditions is a side effect of the fact that
  // I carelessly decided to override the condition attribute for
  // something else in the reference pages. :-(
  option("condition", "expanded ref.desc.attribute-descriptions ref.desc.attributes ref.desc.children ref.desc.parents ref.description ref.desc.rules ref.desc.seealso ref.examples refpages web")
  pipeline "tools/xpl/make-book.xpl"
}

// ======================================================================

task sdocbook_xml(dependsOn: ['sdocbook_tdgxml', 'getDocBookXslt'], type: XMLCalabashTask) {
  inputs.file file("tools/xsl/purpose.xsl")
  inputs.file file("tools/xsl/tdg2db.xsl")
  inputs.file file("tools/xsl/profile.xsl")
  inputs.file file("build/sdocbook/style/purpose.xsl")

  input("source", "build/sdocbook/tdg.xml")
  output("result", "build/sdocbook/book.xml")
  option("arch", "sdocbook")
  option("revision", "5.0 5.1 5.2")
  // This crazy list of conditions is a side effect of the fact that
  // I carelessly decided to override the condition attribute for
  // something else in the reference pages. :-(
  option("condition", "expanded ref.desc.attribute-descriptions ref.desc.attributes ref.desc.children ref.desc.parents ref.description ref.desc.rules ref.desc.seealso ref.examples refpages web")
  pipeline "tools/xpl/make-book.xpl"
}

// ======================================================================

task slides_xml(dependsOn: ['slides_tdgxml', 'getDocBookXslt'], type: XMLCalabashTask) {
  inputs.file file("tools/xsl/purpose.xsl")
  inputs.file file("tools/xsl/tdg2db.xsl")
  inputs.file file("tools/xsl/profile.xsl")
  inputs.file file("build/slides/style/purpose.xsl")

  input("source", "build/slides/tdg.xml")
  output("result", "build/slides/book.xml")
  option("arch", "sdocbook slides")
  option("revision", "5.0 5.1 5.2")
  // This crazy list of conditions is a side effect of the fact that
  // I carelessly decided to override the condition attribute for
  // something else in the reference pages. :-(
  option("condition", "expanded ref.desc.attribute-descriptions ref.desc.attributes ref.desc.children ref.desc.parents ref.description ref.desc.rules ref.desc.seealso ref.examples refpages web")
  pipeline "tools/xpl/make-book.xpl"
}

// ======================================================================

task website_xml(dependsOn: ['website_tdgxml', 'getDocBookXslt'], type: XMLCalabashTask) {
  inputs.file file("tools/xsl/purpose.xsl")
  inputs.file file("tools/xsl/tdg2db.xsl")
  inputs.file file("tools/xsl/profile.xsl")
  inputs.file file("build/website/style/purpose.xsl")

  input("source", "build/website/tdg.xml")
  output("result", "build/website/book.xml")
  option("arch", "slides website")
  option("revision", "5.0 5.1 5.2")
  // This crazy list of conditions is a side effect of the fact that
  // I carelessly decided to override the condition attribute for
  // something else in the reference pages. :-(
  option("condition", "expanded ref.desc.attribute-descriptions ref.desc.attributes ref.desc.children ref.desc.parents ref.description ref.desc.rules ref.desc.seealso ref.examples refpages web")
  pipeline "tools/xpl/make-book.xpl"
}
